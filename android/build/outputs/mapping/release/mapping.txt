# compiler: R8
# compiler_version: 1.5.69
# min_api: 14
# pg_map_id: 69df446
com.badlogic.gdx.Application -> a.a.a.a:
    void error(java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void postRunnable(java.lang.Runnable) -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> c
com.badlogic.gdx.Application$ApplicationType -> a.a.a.a$a:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> c
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> g
    com.badlogic.gdx.Application$ApplicationType WebGL -> e
    com.badlogic.gdx.Application$ApplicationType Applet -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> f
com.badlogic.gdx.ApplicationListener -> a.a.a.b:
    void dispose() -> a
    void resize(int,int) -> a
    void resume() -> b
    void pause() -> c
    void create() -> d
    void render() -> e
com.badlogic.gdx.ApplicationLogger -> a.a.a.c:
    void error(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String) -> b
com.badlogic.gdx.Audio -> a.a.a.d:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> a.a.a.e:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    java.lang.String getLocalStoragePath() -> a
    java.lang.String getExternalStoragePath() -> b
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
com.badlogic.gdx.Files$FileType -> a.a.a.e$a:
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType Classpath -> a
com.badlogic.gdx.Game -> a.a.a.f:
    com.badlogic.gdx.Screen screen -> a
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
    void resume() -> b
    void pause() -> c
    void render() -> e
com.badlogic.gdx.Gdx -> a.a.a.g:
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.graphics.GL30 gl30 -> h
    com.badlogic.gdx.graphics.GL20 gl -> f
    com.badlogic.gdx.graphics.GL20 gl20 -> g
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
com.badlogic.gdx.Graphics -> a.a.a.h:
    boolean supportsExtension(java.lang.String) -> a
    int getWidth() -> b
    int getHeight() -> c
    boolean isGL30Available() -> d
    int getBackBufferHeight() -> e
    int getBackBufferWidth() -> f
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> g
    void requestRendering() -> h
    float getDeltaTime() -> i
com.badlogic.gdx.Graphics$BufferFormat -> a.a.a.h$a:
    int stencil -> f
    int samples -> g
    int a -> d
    int depth -> e
    boolean coverageSampling -> h
    int g -> b
    int b -> c
    int r -> a
com.badlogic.gdx.Graphics$DisplayMode -> a.a.a.h$b:
    int bitsPerPixel -> d
    int height -> b
    int refreshRate -> c
    int width -> a
com.badlogic.gdx.Input -> a.a.a.i:
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    int getX() -> d
    int getY() -> e
com.badlogic.gdx.Input$OnscreenKeyboardType -> a.a.a.i$a:
    com.badlogic.gdx.Input$OnscreenKeyboardType Default -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType URI -> f
    com.badlogic.gdx.Input$OnscreenKeyboardType PhonePad -> c
    com.badlogic.gdx.Input$OnscreenKeyboardType NumberPad -> b
    com.badlogic.gdx.Input$OnscreenKeyboardType[] $VALUES -> g
    com.badlogic.gdx.Input$OnscreenKeyboardType Password -> e
    com.badlogic.gdx.Input$OnscreenKeyboardType Email -> d
com.badlogic.gdx.Input$Orientation -> a.a.a.i$b:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation Portrait -> b
com.badlogic.gdx.InputAdapter -> a.a.a.j:
com.badlogic.gdx.InputProcessor -> a.a.a.k:
    boolean keyDown(int) -> a
    boolean keyTyped(char) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(float,float) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean keyUp(int) -> b
    boolean touchUp(int,int,int,int) -> b
com.badlogic.gdx.LifecycleListener -> a.a.a.l:
    void dispose() -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.Net -> a.a.a.m:
com.badlogic.gdx.Preferences -> a.a.a.n:
    boolean getBoolean(java.lang.String,boolean) -> a
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> a
    int getInteger(java.lang.String,int) -> b
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> b
com.badlogic.gdx.Screen -> a.a.a.o:
    void hide() -> a
    void render(float) -> a
    void resize(int,int) -> a
    void resume() -> b
    void pause() -> c
    void show() -> d
com.badlogic.gdx.assets.AssetLoaderParameters -> a.a.a.p.a:
com.badlogic.gdx.assets.AssetManager -> a.a.a.p.b:
    void finishLoading() -> t
com.badlogic.gdx.assets.loaders.AssetLoader -> a.a.a.p.c.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> a.a.a.p.c.b:
com.badlogic.gdx.assets.loaders.FileHandleResolver -> a.a.a.p.c.c:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> a.a.a.p.c.d.a:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.audio.Music -> a.a.a.q.a:
    void setLooping(boolean) -> a
    void setVolume(float) -> b
    void setPosition(float) -> c
    void play() -> o
    void stop() -> q
com.badlogic.gdx.audio.Music$OnCompletionListener -> a.a.a.q.a$a:
    void onCompletion(com.badlogic.gdx.audio.Music) -> a
com.badlogic.gdx.audio.Sound -> a.a.a.q.b:
com.badlogic.gdx.backends.android.AndroidApplication -> a.a.a.r.a.a:
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    boolean useImmersiveMode -> o
    int logLevel -> m
    boolean hideStatusBar -> p
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.utils.SnapshotArray lifecycleListeners -> k
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    boolean isWaitingForAudio -> r
    android.os.Handler handler -> g
    com.badlogic.gdx.utils.Array androidEventListeners -> l
    com.badlogic.gdx.ApplicationLogger applicationLogger -> n
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.ApplicationListener listener -> f
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    int wasFocusChanged -> q
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void error(java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> a
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> a
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void postRunnable(java.lang.Runnable) -> a
    void setApplicationLogger(com.badlogic.gdx.ApplicationLogger) -> a
    void useImmersiveMode(boolean) -> a
    void createWakeLock(boolean) -> b
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> c
    void hideStatusBar(boolean) -> c
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> d
    com.badlogic.gdx.utils.Array getRunnables() -> e
    android.content.Context getContext() -> f
    android.view.Window getApplicationWindow() -> g
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> h
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> i
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> j
    com.badlogic.gdx.ApplicationLogger getApplicationLogger() -> k
    com.badlogic.gdx.Audio getAudio() -> l
    com.badlogic.gdx.Files getFiles() -> m
    com.badlogic.gdx.Net getNet() -> n
    int getVersion() -> o
com.badlogic.gdx.backends.android.AndroidApplication$1 -> a.a.a.r.a.a$a:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void dispose() -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.AndroidApplicationBase -> a.a.a.r.a.b:
    void useImmersiveMode(boolean) -> a
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> d
    com.badlogic.gdx.utils.Array getRunnables() -> e
    android.content.Context getContext() -> f
    android.view.Window getApplicationWindow() -> g
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> h
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> i
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> a.a.a.r.a.c:
    boolean useWakelock -> n
    int sensorDelay -> l
    boolean hideStatusBar -> o
    int touchSleepTime -> m
    boolean disableAudio -> p
    boolean useGyroscope -> i
    boolean useCompass -> j
    boolean useRotationVectorSensor -> k
    int stencil -> f
    int numSamples -> g
    int a -> d
    int depth -> e
    int g -> b
    int b -> c
    boolean useImmersiveMode -> s
    int r -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> r
    boolean useGL30 -> t
    boolean useAccelerometer -> h
    int maxNetThreads -> u
    int maxSimultaneousSounds -> q
com.badlogic.gdx.backends.android.AndroidApplicationLogger -> a.a.a.r.a.d:
    void error(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String) -> b
com.badlogic.gdx.backends.android.AndroidAudio -> a.a.a.r.a.e:
    void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic) -> a
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.AndroidClipboard -> a.a.a.r.a.f:
com.badlogic.gdx.backends.android.AndroidEventListener -> a.a.a.r.a.g:
    void onActivityResult(int,int,android.content.Intent) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> a.a.a.r.a.h:
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    boolean exists() -> a
    java.io.File file() -> c
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> c
    long length() -> d
    com.badlogic.gdx.files.FileHandle parent() -> g
    java.io.InputStream read() -> i
    android.content.res.AssetFileDescriptor getAssetFileDescriptor() -> l
com.badlogic.gdx.backends.android.AndroidFiles -> a.a.a.r.a.i:
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> d
    android.content.res.AssetManager assets -> c
    java.lang.String externalFilesPath -> a
    java.lang.String localpath -> b
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    java.lang.String getLocalStoragePath() -> a
    com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    java.lang.String getExternalStoragePath() -> b
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile() -> c
com.badlogic.gdx.backends.android.AndroidGL20 -> a.a.a.r.a.j:
    int[] ints2 -> b
    int[] ints3 -> c
    int[] ints -> a
    byte[] buffer -> d
    void glBindFramebuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    void glClearColor(float,float,float,float) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDepthMask(boolean) -> a
    void glDrawArrays(int,int,int) -> a
    void glEnable(int) -> a
    int glGenBuffer() -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> a
    void glGetFloatv(int,java.nio.FloatBuffer) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    void glShaderSource(int,java.lang.String) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glAttachShader(int,int) -> b
    int glCheckFramebufferStatus(int) -> b
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> b
    int glGenRenderbuffer() -> b
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> b
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    int glGetUniformLocation(int,java.lang.String) -> b
    void glTexParameteri(int,int,int) -> b
    void glViewport(int,int,int,int) -> b
    void glBindRenderbuffer(int,int) -> c
    void glBlendFuncSeparate(int,int,int,int) -> c
    int glGenTexture() -> c
    int glGetAttribLocation(int,java.lang.String) -> c
    void glUseProgram(int) -> c
    int glCreateProgram() -> d
    void glDrawElements(int,int,int,int) -> d
    void glGenerateMipmap(int) -> d
    void glGetIntegerv(int,java.nio.IntBuffer) -> d
    void glUniform1i(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glFramebufferRenderbuffer(int,int,int,int) -> e
    int glGenFramebuffer() -> e
    void glLinkProgram(int) -> e
    void glDeleteRenderbuffer(int) -> f
    void glPixelStorei(int,int) -> f
    void glScissor(int,int,int,int) -> f
    void glBindTexture(int,int) -> g
    java.lang.String glGetShaderInfoLog(int) -> g
    void glRenderbufferStorage(int,int,int,int) -> g
    java.lang.String glGetProgramInfoLog(int) -> h
    void glEnableVertexAttribArray(int) -> i
    java.lang.String glGetString(int) -> j
    void glClear(int) -> k
    void glDeleteFramebuffer(int) -> l
    void glDisable(int) -> m
    void glDisableVertexAttribArray(int) -> n
    int glCreateShader(int) -> o
    void glDeleteTexture(int) -> q
    void glDeleteShader(int) -> r
    void glDeleteProgram(int) -> s
    void glCompileShader(int) -> t
    void glDeleteBuffer(int) -> u
com.badlogic.gdx.backends.android.AndroidGL30 -> a.a.a.r.a.k:
    void glDrawArraysInstanced(int,int,int,int) -> a
    void glDrawBuffers(int,java.nio.IntBuffer) -> a
    void glDrawElementsInstanced(int,int,int,int,int) -> a
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> b
    void glGenVertexArrays(int,java.nio.IntBuffer) -> c
    void glBindVertexArray(int) -> p
com.badlogic.gdx.backends.android.AndroidGraphics -> a.a.a.r.a.l:
    long lastFrameTime -> i
    boolean created -> n
    float deltaTime -> j
    long frameId -> l
    boolean running -> o
    java.lang.String extensions -> h
    long frameStart -> k
    int frames -> m
    boolean pause -> p
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 view -> a
    com.badlogic.gdx.graphics.GL30 gl30 -> f
    com.badlogic.gdx.graphics.GL20 gl20 -> e
    int[] value -> u
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> s
    boolean enforceContinuousRendering -> w
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> d
    int width -> b
    boolean resume -> q
    int height -> c
    boolean destroy -> r
    com.badlogic.gdx.graphics.glutils.GLVersion glVersion -> g
    boolean isContinuous -> t
    java.lang.Object synch -> v
    boolean checkGL20() -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> a
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> a
    void setContinuousRendering(boolean) -> a
    void setupGL(javax.microedition.khronos.opengles.GL10) -> a
    boolean supportsExtension(java.lang.String) -> a
    int getWidth() -> b
    int getHeight() -> c
    boolean isGL30Available() -> d
    int getBackBufferHeight() -> e
    int getBackBufferWidth() -> f
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> g
    void requestRendering() -> h
    float getDeltaTime() -> i
    void clearManagedCaches() -> j
    void destroy() -> k
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> l
    android.view.View getView() -> m
    boolean isContinuousRendering() -> n
    void logManagedCachesStatus() -> o
    void onPauseGLSurfaceView() -> p
    void onResumeGLSurfaceView() -> q
    void pause() -> r
    void preserveEGLContextOnPause() -> s
    void resume() -> t
    void updatePpi() -> u
    void updateSafeAreaInsets() -> v
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> a.a.a.r.a.l$a:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> a
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> a.a.a.r.a.l$b:
com.badlogic.gdx.backends.android.AndroidInput -> a.a.a.r.a.m:
    void onPause() -> a
    void setKeyboardAvailable(boolean) -> a
    void processEvents() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.AndroidMouseHandler -> a.a.a.r.a.n:
    int deltaY -> b
    int deltaX -> a
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> a.a.a.r.a.o:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> a
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> e
    android.media.MediaPlayer player -> b
    boolean isPrepared -> c
    boolean wasPlaying -> d
    void dispose() -> a
    void setLooping(boolean) -> a
    boolean isPlaying() -> b
    void setVolume(float) -> b
    void pause() -> c
    void setPosition(float) -> c
    void play() -> o
    void stop() -> q
com.badlogic.gdx.backends.android.AndroidMusic$1 -> a.a.a.r.a.o$a:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
com.badlogic.gdx.backends.android.AndroidNet -> a.a.a.r.a.p:
com.badlogic.gdx.backends.android.AndroidPreferences -> a.a.a.r.a.q:
    android.content.SharedPreferences$Editor editor -> b
    android.content.SharedPreferences sharedPrefs -> a
    void edit() -> a
    boolean getBoolean(java.lang.String,boolean) -> a
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> a
    int getInteger(java.lang.String,int) -> b
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> b
com.badlogic.gdx.backends.android.AndroidSound -> a.a.a.r.a.r:
com.badlogic.gdx.backends.android.AndroidTouchHandler -> a.a.a.r.a.s:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long) -> a
    boolean supportsMultitouch(android.content.Context) -> a
    int toGdxButton(int) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> a.a.a.r.a.t:
    void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 -> a.a.a.r.a.t$a:
    com.badlogic.gdx.backends.android.AndroidApplicationBase val$application -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1 -> a.a.a.r.a.t$a$a:
    com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1 -> a
com.badlogic.gdx.backends.android.AndroidZipFileHandle -> a.a.a.r.a.u:
    java.lang.String path -> g
    long fdLength -> e
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> f
    boolean hasAssetFd -> d
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    boolean exists() -> a
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> c
    long length() -> d
    com.badlogic.gdx.files.FileHandle parent() -> g
    java.io.InputStream read() -> i
    android.content.res.AssetFileDescriptor getAssetFileDescriptor() -> l
    java.lang.String getPath() -> m
    void initialize() -> n
com.badlogic.gdx.backends.android.DefaultAndroidAudio -> a.a.a.r.a.v:
    android.media.AudioManager manager -> b
    android.media.SoundPool soundPool -> a
    java.util.List musics -> c
    void dispose() -> a
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    void resume() -> b
    void pause() -> c
com.badlogic.gdx.backends.android.DefaultAndroidInput -> a.a.a.r.a.w:
    int keyCount -> n
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    boolean requestFocus -> P
    com.badlogic.gdx.Input$Orientation nativeOrientation -> I
    com.badlogic.gdx.utils.IntSet keysToCatch -> A
    boolean[] justPressedKeys -> q
    float[] rotationVectorValues -> E
    java.util.ArrayList touchEvents -> e
    boolean[] keys -> o
    java.util.ArrayList keyListeners -> c
    int[] touchX -> f
    boolean[] touched -> j
    java.util.ArrayList genericMotionListeners -> N
    int[] deltaX -> h
    android.hardware.SensorEventListener accelerometerListener -> J
    android.hardware.SensorEventListener compassListener -> L
    float[] gyroscopeValues -> v
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> H
    int[] realId -> l
    boolean rotationVectorAvailable -> C
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    float[] pressure -> m
    com.badlogic.gdx.Application app -> w
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> y
    boolean keyJustPressed -> p
    com.badlogic.gdx.InputProcessor processor -> G
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> O
    boolean[] justPressedButtons -> r
    java.util.ArrayList keyEvents -> d
    float[] magneticFieldValues -> D
    boolean accelerometerAvailable -> t
    int[] touchY -> g
    int[] deltaY -> i
    int sleepTime -> z
    android.hardware.SensorEventListener gyroscopeListener -> K
    android.hardware.SensorManager manager -> s
    android.hardware.SensorEventListener rotationVectorListener -> M
    float[] accelerometerValues -> u
    android.content.Context context -> x
    boolean justTouched -> F
    int[] button -> k
    boolean compassAvailable -> B
    int getAndroidInputType(com.badlogic.gdx.Input$OnscreenKeyboardType) -> a
    int lookUpPointerIndex(int) -> a
    void onPause() -> a
    float[] resize(float[]) -> a
    int[] resize(int[]) -> a
    boolean[] resize(boolean[]) -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void setKeyboardAvailable(boolean) -> a
    void processEvents() -> b
    void onResume() -> c
    int getX() -> d
    int getY() -> e
    int getFreePointerIndex() -> f
    int getRotation() -> g
    void registerSensorListeners() -> h
    void unregisterSensorListeners() -> i
com.badlogic.gdx.backends.android.DefaultAndroidInput$1 -> a.a.a.r.a.w$a:
    com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$2 -> a.a.a.r.a.w$b:
    com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$5 -> a.a.a.r.a.w$c:
    int[] $SwitchMap$com$badlogic$gdx$Input$OnscreenKeyboardType -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent -> a.a.a.r.a.w$d:
    long timeStamp -> a
    int type -> b
    char keyChar -> d
    int keyCode -> c
com.badlogic.gdx.backends.android.DefaultAndroidInput$SensorListener -> a.a.a.r.a.w$e:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> a
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent -> a.a.a.r.a.w$f:
    int pointer -> h
    int scrollAmountY -> f
    long timeStamp -> a
    int button -> g
    int y -> d
    int scrollAmountX -> e
    int type -> b
    int x -> c
com.badlogic.gdx.backends.android.ZipResourceFile -> a.a.a.r.a.x:
    android.content.res.AssetFileDescriptor getAssetFileDescriptor(java.lang.String) -> a
    com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getEntriesAt(java.lang.String) -> b
    java.io.InputStream getInputStream(java.lang.String) -> c
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO -> a.a.a.r.a.x$a:
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> a.a.a.r.a.y.a:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> a.a.a.r.a.y.b:
    int targetGLESVersion -> d
    java.lang.String TAG -> c
    com.badlogic.gdx.Input$OnscreenKeyboardType onscreenKeyboardType -> b
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
    void init(boolean,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> a.a.a.r.a.y.b$a:
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> a.a.a.r.a.y.b$b:
    int[] mValue -> g
    int[] s_configAttribs2 -> i
    int EGL_OPENGL_ES2_BIT -> h
    int mStencilSize -> f
    int mAlphaSize -> d
    int mDepthSize -> e
    int mGreenSize -> b
    int mBlueSize -> c
    int mRedSize -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> a.a.a.r.a.y.b$c:
    int EGL_CONTEXT_CLIENT_VERSION -> a
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> a.a.a.r.a.y.c:
    int[] mConfigAttribs -> h
    int[] mValue -> i
    int mStencilSize -> f
    int mNumSamples -> g
    int mAlphaSize -> d
    int mDepthSize -> e
    int mGreenSize -> b
    int mBlueSize -> c
    int mRedSize -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> a.a.a.r.a.y.d:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> a.a.a.r.a.y.d$a:
    int height -> b
    int width -> a
com.badlogic.gdx.files.FileHandle -> a.a.a.s.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    boolean exists() -> a
    java.lang.String extension() -> b
    java.io.Reader reader(java.lang.String) -> b
    java.io.File file() -> c
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> c
    long length() -> d
    java.lang.String name() -> e
    java.lang.String nameWithoutExtension() -> f
    com.badlogic.gdx.files.FileHandle parent() -> g
    java.lang.String path() -> h
    java.io.InputStream read() -> i
    byte[] readBytes() -> j
    com.badlogic.gdx.Files$FileType type() -> k
    int estimateLength() -> l
com.badlogic.gdx.files.FileHandle$1 -> a.a.a.s.a$a:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
com.badlogic.gdx.graphics.Camera -> a.a.a.t.a:
    com.badlogic.gdx.math.Matrix4 projection -> d
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 direction -> b
    float viewportWidth -> j
    com.badlogic.gdx.math.Vector3 up -> c
    float far -> i
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float) -> a
    void update() -> a
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float) -> b
com.badlogic.gdx.graphics.Color -> a.a.a.t.b:
    com.badlogic.gdx.graphics.Color RED -> E
    com.badlogic.gdx.graphics.Color CORAL -> G
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> f
    com.badlogic.gdx.graphics.Color PINK -> I
    com.badlogic.gdx.graphics.Color DARK_GRAY -> h
    com.badlogic.gdx.graphics.Color PURPLE -> K
    float b -> c
    float r -> a
    com.badlogic.gdx.graphics.Color ORANGE -> A
    com.badlogic.gdx.graphics.Color TAN -> C
    com.badlogic.gdx.graphics.Color CHARTREUSE -> t
    com.badlogic.gdx.graphics.Color FOREST -> v
    com.badlogic.gdx.graphics.Color YELLOW -> x
    com.badlogic.gdx.graphics.Color GOLDENROD -> z
    com.badlogic.gdx.graphics.Color MAROON -> M
    com.badlogic.gdx.graphics.Color BLUE -> l
    com.badlogic.gdx.graphics.Color ROYAL -> n
    com.badlogic.gdx.graphics.Color SKY -> p
    com.badlogic.gdx.graphics.Color TEAL -> r
    com.badlogic.gdx.graphics.Color WHITE -> e
    com.badlogic.gdx.graphics.Color FIREBRICK -> D
    com.badlogic.gdx.graphics.Color GRAY -> g
    float WHITE_FLOAT_BITS -> j
    com.badlogic.gdx.graphics.Color SCARLET -> F
    com.badlogic.gdx.graphics.Color BLACK -> i
    com.badlogic.gdx.graphics.Color SALMON -> H
    com.badlogic.gdx.graphics.Color CLEAR -> k
    com.badlogic.gdx.graphics.Color MAGENTA -> J
    float a -> d
    float g -> b
    com.badlogic.gdx.graphics.Color BROWN -> B
    com.badlogic.gdx.graphics.Color LIME -> u
    com.badlogic.gdx.graphics.Color OLIVE -> w
    com.badlogic.gdx.graphics.Color GOLD -> y
    com.badlogic.gdx.graphics.Color NAVY -> m
    com.badlogic.gdx.graphics.Color VIOLET -> L
    com.badlogic.gdx.graphics.Color SLATE -> o
    com.badlogic.gdx.graphics.Color CYAN -> q
    com.badlogic.gdx.graphics.Color GREEN -> s
    void abgr8888ToColor(com.badlogic.gdx.graphics.Color,float) -> a
    com.badlogic.gdx.graphics.Color clamp() -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> a
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> a
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> a
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color cpy() -> b
    int rgba8888(float,float,float,float) -> b
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> b
    float toFloatBits() -> c
    float toFloatBits(float,float,float,float) -> c
    int toIntBits() -> d
com.badlogic.gdx.graphics.Colors -> a.a.a.t.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> a
    void reset() -> a
com.badlogic.gdx.graphics.Cubemap -> a.a.a.t.d:
    com.badlogic.gdx.graphics.CubemapData data -> i
    java.util.Map managedCubemaps -> k
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    java.lang.String getManagedStatus() -> A
    void clearAllCubemaps(com.badlogic.gdx.Application) -> a
    void load(com.badlogic.gdx.graphics.CubemapData) -> a
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> b
    boolean isManaged() -> y
    void reload() -> z
com.badlogic.gdx.graphics.CubemapData -> a.a.a.t.e:
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    void consumeCubemapData() -> k
com.badlogic.gdx.graphics.GL20 -> a.a.a.t.f:
    void glBindFramebuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    void glClearColor(float,float,float,float) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDepthMask(boolean) -> a
    void glDrawArrays(int,int,int) -> a
    void glEnable(int) -> a
    int glGenBuffer() -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> a
    void glGetFloatv(int,java.nio.FloatBuffer) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    void glShaderSource(int,java.lang.String) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glAttachShader(int,int) -> b
    int glCheckFramebufferStatus(int) -> b
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> b
    int glGenRenderbuffer() -> b
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> b
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    int glGetUniformLocation(int,java.lang.String) -> b
    void glTexParameteri(int,int,int) -> b
    void glViewport(int,int,int,int) -> b
    void glBindRenderbuffer(int,int) -> c
    void glBlendFuncSeparate(int,int,int,int) -> c
    int glGenTexture() -> c
    int glGetAttribLocation(int,java.lang.String) -> c
    void glUseProgram(int) -> c
    int glCreateProgram() -> d
    void glDrawElements(int,int,int,int) -> d
    void glGenerateMipmap(int) -> d
    void glGetIntegerv(int,java.nio.IntBuffer) -> d
    void glUniform1i(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glFramebufferRenderbuffer(int,int,int,int) -> e
    int glGenFramebuffer() -> e
    void glLinkProgram(int) -> e
    void glDeleteRenderbuffer(int) -> f
    void glPixelStorei(int,int) -> f
    void glScissor(int,int,int,int) -> f
    void glBindTexture(int,int) -> g
    java.lang.String glGetShaderInfoLog(int) -> g
    void glRenderbufferStorage(int,int,int,int) -> g
    java.lang.String glGetProgramInfoLog(int) -> h
    void glEnableVertexAttribArray(int) -> i
    java.lang.String glGetString(int) -> j
    void glClear(int) -> k
    void glDeleteFramebuffer(int) -> l
    void glDisable(int) -> m
    void glDisableVertexAttribArray(int) -> n
    int glCreateShader(int) -> o
    void glDeleteTexture(int) -> q
    void glDeleteShader(int) -> r
    void glDeleteProgram(int) -> s
    void glCompileShader(int) -> t
    void glDeleteBuffer(int) -> u
com.badlogic.gdx.graphics.GL30 -> a.a.a.t.g:
    void glDrawArraysInstanced(int,int,int,int) -> a
    void glDrawBuffers(int,java.nio.IntBuffer) -> a
    void glDrawElementsInstanced(int,int,int,int,int) -> a
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> b
    void glGenVertexArrays(int,java.nio.IntBuffer) -> c
    void glBindVertexArray(int) -> p
com.badlogic.gdx.graphics.GLTexture -> a.a.a.t.h:
    float maxAnisotropicFilterLevel -> h
    float anisotropicFilterLevel -> g
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    int glTarget -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    float unsafeSetAnisotropicFilter(float,boolean) -> a
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int) -> a
    void bind() -> k
    void delete() -> t
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> u
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> v
    int getTextureObjectHandle() -> w
    float getMaxAnisotropicFilterLevel() -> x
com.badlogic.gdx.graphics.Mesh -> a.a.a.t.i:
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> a
    com.badlogic.gdx.graphics.glutils.IndexData indices -> b
    com.badlogic.gdx.graphics.glutils.InstanceData instances -> e
    boolean isInstanced -> f
    java.util.Map meshes -> g
    boolean autoBind -> c
    boolean isVertexArray -> d
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> a
    void dispose() -> a
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    int getNumVertices() -> e
    int getNumIndices() -> l
    java.nio.ShortBuffer getIndicesBuffer() -> t
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> u
    java.lang.String getManagedStatus() -> v
com.badlogic.gdx.graphics.Mesh$1 -> a.a.a.t.i$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
com.badlogic.gdx.graphics.Mesh$VertexDataType -> a.a.a.t.i$b:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> e
com.badlogic.gdx.graphics.OrthographicCamera -> a.a.a.t.j:
    com.badlogic.gdx.math.Vector3 tmp -> n
    float zoom -> m
    void setToOrtho(boolean,float,float) -> a
    void update() -> a
    void update(boolean) -> a
com.badlogic.gdx.graphics.Pixmap -> a.a.a.t.k:
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> c
    int getWidth() -> A
    void dispose() -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void setColor(float,float,float,float) -> a
    void fill() -> t
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> u
    int getGLFormat() -> v
    int getGLInternalFormat() -> w
    int getGLType() -> x
    int getHeight() -> y
    java.nio.ByteBuffer getPixels() -> z
com.badlogic.gdx.graphics.Pixmap$Blending -> a.a.a.t.k$a:
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
com.badlogic.gdx.graphics.Pixmap$Filter -> a.a.a.t.k$b:
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> a
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> b
com.badlogic.gdx.graphics.Pixmap$Format -> a.a.a.t.k$c:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
com.badlogic.gdx.graphics.PixmapIO -> a.a.a.t.l:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> a.a.a.t.l$a:
    byte[] readBuffer -> a
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.Texture -> a.a.a.t.m:
    java.util.Map managedTextures -> k
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    com.badlogic.gdx.graphics.TextureData data -> i
    boolean isManaged() -> A
    void reload() -> B
    java.lang.String getManagedStatus() -> C
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> a
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void dispose() -> a
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    int getHeight() -> y
    int getWidth() -> z
com.badlogic.gdx.graphics.Texture$TextureFilter -> a.a.a.t.m$a:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> c
    int glEnum -> a
    int getGLEnum() -> a
    boolean isMipMap() -> b
com.badlogic.gdx.graphics.Texture$TextureWrap -> a.a.a.t.m$b:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    int glEnum -> a
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureArray -> a.a.a.t.n:
    com.badlogic.gdx.graphics.TextureArrayData data -> i
    java.util.Map managedTextureArrays -> j
    void clearAllTextureArrays(com.badlogic.gdx.Application) -> a
    void load(com.badlogic.gdx.graphics.TextureArrayData) -> a
    void invalidateAllTextureArrays(com.badlogic.gdx.Application) -> b
    boolean isManaged() -> y
    void reload() -> z
com.badlogic.gdx.graphics.TextureArrayData -> a.a.a.t.o:
    int getDepth() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    int getInternalFormat() -> g
    void consumeTextureArrayData() -> h
    int getGLType() -> i
com.badlogic.gdx.graphics.TextureData -> a.a.a.t.p:
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.TextureData$Factory -> a.a.a.t.p$a:
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
com.badlogic.gdx.graphics.TextureData$TextureDataType -> a.a.a.t.p$b:
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> b
com.badlogic.gdx.graphics.VertexAttribute -> a.a.a.t.q:
    java.lang.String alias -> f
    int usageIndex -> h
    int unit -> g
    int type -> d
    int offset -> e
    int numComponents -> b
    boolean normalized -> c
    int usage -> a
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
    int getKey() -> a
    int getSizeInBytes() -> b
com.badlogic.gdx.graphics.VertexAttributes -> a.a.a.t.r:
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> d
    long mask -> c
    int vertexSize -> b
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> a
    int compareTo(com.badlogic.gdx.graphics.VertexAttributes) -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    long getMask() -> a
    int size() -> b
    int calculateOffsets() -> c
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> a.a.a.t.r$a:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> a.a.a.t.r$b:
    java.lang.Object[] array -> a
    int index -> b
    boolean valid -> c
com.badlogic.gdx.graphics.g2d.Animation -> com.badlogic.gdx.graphics.g2d.a:
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode playMode -> e
    java.lang.Object[] keyFrames -> a
    float lastStateTime -> d
    float frameDuration -> b
    int lastFrameNumber -> c
    java.lang.Object getKeyFrame(float) -> a
    java.lang.Object getKeyFrame(float,boolean) -> a
    void setKeyFrames(java.lang.Object[]) -> a
    int getKeyFrameIndex(float) -> b
com.badlogic.gdx.graphics.g2d.Animation$1 -> com.badlogic.gdx.graphics.g2d.a$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$Animation$PlayMode -> a
com.badlogic.gdx.graphics.g2d.Animation$PlayMode -> com.badlogic.gdx.graphics.g2d.a$b:
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_RANDOM -> f
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_PINGPONG -> e
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] $VALUES -> g
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode REVERSED -> b
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode NORMAL -> a
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_REVERSED -> d
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP -> c
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.b:
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setPackedColor(float) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void end() -> g
    float getPackedColor() -> m
    com.badlogic.gdx.graphics.Color getColor() -> n
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> p
    void begin() -> r
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.c:
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    boolean integer -> e
    com.badlogic.gdx.utils.Array regions -> b
    boolean flipped -> d
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> A
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.Color getColor() -> n
    float getCapHeight() -> t
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData() -> u
    float getDescent() -> v
    com.badlogic.gdx.utils.Array getRegions() -> w
    float getScaleX() -> x
    float getScaleY() -> y
    boolean isFlipped() -> z
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.c$a:
    float descent -> l
    float ascent -> k
    float capHeight -> j
    float lineHeight -> i
    com.badlogic.gdx.files.FileHandle fontFile -> c
    float padLeft -> h
    float padBottom -> g
    float padRight -> f
    float padTop -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> r
    boolean markupEnabled -> q
    java.lang.String[] imagePaths -> b
    char[] breakChars -> v
    char[] xChars -> w
    float xHeight -> u
    char[] capChars -> x
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph -> s
    float spaceXadvance -> t
    java.lang.String name -> a
    float scaleY -> p
    float scaleX -> o
    float blankLineScale -> n
    boolean flipped -> d
    float down -> m
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    int getWrapIndex(com.badlogic.gdx.utils.Array,int) -> a
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> a
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setScale(float) -> a
    void setScale(float,float) -> a
    boolean isBreakChar(char) -> b
    boolean isWhitespace(char) -> c
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.c$b:
    boolean fixedWidth -> n
    int page -> o
    int xadvance -> l
    float v2 -> i
    float u2 -> h
    int xoffset -> j
    float v -> g
    int yoffset -> k
    float u -> f
    int width -> d
    int height -> e
    int srcX -> b
    int srcY -> c
    byte[][] kerning -> m
    int id -> a
    int getKerning(char) -> a
    void setKerning(int,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.d:
    float currentTint -> i
    float y -> g
    com.badlogic.gdx.graphics.Color color -> h
    float x -> f
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> l
    int glyphCount -> e
    com.badlogic.gdx.utils.Array pooledLayouts -> d
    com.badlogic.gdx.utils.Array layouts -> c
    com.badlogic.gdx.graphics.Color tempColor -> n
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    float[][] pageVertices -> j
    boolean integer -> b
    int[] idx -> k
    int[] tempGlyphCount -> m
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float) -> a
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
    void clear() -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout) -> a
    void requirePageGlyphs(int,int) -> a
    void setPosition(float,float) -> a
    void tint(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color getColor() -> b
    void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> b
    void translate(float,float) -> b
    void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> c
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long[] nativeData -> f
    long basePtr -> a
    java.nio.ByteBuffer pixelPtr -> e
    int format -> d
    int width -> b
    int height -> c
    void clear(int) -> a
    void dispose() -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    void setBlend(int) -> b
    void convert(int) -> c
    java.lang.String getFormatString(int) -> d
    int toGlFormat(int) -> e
    int toGlType(int) -> f
    int getFormat() -> t
    int getGLFormat() -> u
    int getGLInternalFormat() -> v
    int getGLType() -> w
    int getHeight() -> x
    java.nio.ByteBuffer getPixels() -> y
    int getWidth() -> z
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.e:
    com.badlogic.gdx.utils.Pool glyphRunPool -> d
    com.badlogic.gdx.utils.Array runs -> a
    float height -> c
    float width -> b
    com.badlogic.gdx.utils.Pool colorPool -> e
    com.badlogic.gdx.utils.Array colorStack -> f
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> a
    int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool) -> a
    void reset() -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence) -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean) -> a
    void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,int,int) -> a
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.e$a:
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.utils.Array glyphs -> a
    float width -> e
    float y -> d
    float x -> c
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    void reset() -> a
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.f:
    float rightWidth -> l
    float leftWidth -> k
    int topRight -> j
    int topLeft -> h
    int topCenter -> i
    int middleCenter -> f
    int middleRight -> g
    int bottomRight -> d
    int middleLeft -> e
    int bottomLeft -> b
    int bottomCenter -> c
    com.badlogic.gdx.graphics.Texture texture -> a
    com.badlogic.gdx.graphics.Color tmpDrawColor -> x
    float padBottom -> w
    float padTop -> v
    float padRight -> u
    float padLeft -> t
    float bottomHeight -> p
    float[] vertices -> q
    int idx -> r
    float topHeight -> o
    float middleHeight -> n
    com.badlogic.gdx.graphics.Color color -> s
    float middleWidth -> m
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,boolean,boolean) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    float getBottomHeight() -> a
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    void scale(float,float) -> a
    void set(int,float,float,float,float,float) -> a
    void setPadding(float,float,float,float) -> a
    float getLeftWidth() -> b
    void prepareVertices(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> b
    float getPadBottom() -> c
    float getPadLeft() -> d
    float getPadRight() -> e
    float getPadTop() -> f
    float getRightWidth() -> g
    float getTopHeight() -> h
    float getTotalHeight() -> i
    float getTotalWidth() -> j
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.g:
    float width -> l
    float y -> k
    float x -> j
    com.badlogic.gdx.graphics.Color color -> i
    float[] vertices -> h
    float scaleY -> r
    float scaleX -> q
    float rotation -> p
    float originY -> o
    float originX -> n
    boolean dirty -> s
    float height -> m
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setOrigin(float,float) -> a
    void setPackedColor(float) -> a
    void setRegion(float,float,float,float) -> a
    void setBounds(float,float,float,float) -> b
    void setRotation(float) -> b
    void setScale(float,float) -> b
    void setColor(float,float,float,float) -> c
    void setSize(float,float) -> c
    void translate(float,float) -> d
    com.badlogic.gdx.graphics.Color getColor() -> j
    float getHeight() -> k
    float getOriginX() -> l
    float getOriginY() -> m
    float[] getVertices() -> n
    float getWidth() -> o
    float getX() -> p
    float getY() -> q
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.h:
    int blendSrcFuncAlpha -> l
    int blendDstFuncAlpha -> m
    boolean ownsShader -> p
    com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType -> v
    boolean blendingDisabled -> i
    int blendSrcFunc -> j
    int blendDstFunc -> k
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> n
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> o
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> g
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> h
    com.badlogic.gdx.math.Matrix4 transformMatrix -> f
    boolean drawing -> e
    float colorPacked -> r
    int totalRenderCalls -> t
    int maxSpritesInBatch -> u
    com.badlogic.gdx.graphics.Color color -> q
    int renderCalls -> s
    void dispose() -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setPackedColor(float) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
    boolean isBlendingEnabled() -> b
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> c
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> d
    void end() -> g
    float getPackedColor() -> m
    com.badlogic.gdx.graphics.Color getColor() -> n
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> p
    void begin() -> r
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.i:
    com.badlogic.gdx.utils.ObjectSet textures -> a
    com.badlogic.gdx.utils.Array regions -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> t
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.i$a:
    int originalWidth -> n
    int[][] values -> s
    float offsetY -> k
    int originalHeight -> o
    java.lang.String name -> i
    float offsetX -> j
    int packedWidth -> l
    int packedHeight -> m
    boolean rotate -> p
    int index -> h
    int degrees -> q
    java.lang.String[] names -> r
    int[] findValue(java.lang.String) -> a
    void flip(boolean,boolean) -> a
    float getRotatedPackedHeight() -> j
    float getRotatedPackedWidth() -> k
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.i$b:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> t
    float originalOffsetY -> v
    float originalOffsetX -> u
    void flip(boolean,boolean) -> a
    void setOrigin(float,float) -> a
    void setBounds(float,float,float,float) -> b
    void setSize(float,float) -> c
    float getHeight() -> k
    float getOriginX() -> l
    float getOriginY() -> m
    float getWidth() -> o
    float getX() -> p
    float getY() -> q
    float getHeightRatio() -> r
    float getWidthRatio() -> s
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.i$c:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    int readEntry(java.lang.String[],java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$1 -> com.badlogic.gdx.graphics.g2d.i$c$f:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$10 -> com.badlogic.gdx.graphics.g2d.i$c$a:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$11 -> com.badlogic.gdx.graphics.g2d.i$c$b:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$12 -> com.badlogic.gdx.graphics.g2d.i$c$c:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$13 -> com.badlogic.gdx.graphics.g2d.i$c$d:
    boolean[] val$hasIndexes -> b
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$14 -> com.badlogic.gdx.graphics.g2d.i$c$e:
    int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$2 -> com.badlogic.gdx.graphics.g2d.i$c$g:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$3 -> com.badlogic.gdx.graphics.g2d.i$c$h:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$4 -> com.badlogic.gdx.graphics.g2d.i$c$i:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$5 -> com.badlogic.gdx.graphics.g2d.i$c$j:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$6 -> com.badlogic.gdx.graphics.g2d.i$c$k:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$7 -> com.badlogic.gdx.graphics.g2d.i$c$l:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$8 -> com.badlogic.gdx.graphics.g2d.i$c$m:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$9 -> com.badlogic.gdx.graphics.g2d.i$c$n:
    java.lang.String[] val$entry -> a
    void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Field -> com.badlogic.gdx.graphics.g2d.i$c$o:
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.i$c$p:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    boolean pma -> k
    com.badlogic.gdx.graphics.Pixmap$Format format -> f
    float height -> d
    boolean useMipMaps -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> j
    float width -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> g
    com.badlogic.gdx.graphics.Texture texture -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.i$c$q:
    int index -> m
    boolean flip -> p
    float offsetY -> h
    int originalHeight -> j
    float offsetX -> g
    int degrees -> k
    int originalWidth -> i
    boolean rotate -> l
    int height -> f
    int top -> d
    int width -> e
    int left -> c
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    java.lang.String[] names -> n
    int[][] values -> o
    java.lang.String name -> b
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.j:
    float v2 -> e
    float u2 -> d
    int regionWidth -> f
    float v -> c
    int regionHeight -> g
    float u -> b
    com.badlogic.gdx.graphics.Texture texture -> a
    void flip(boolean,boolean) -> a
    int getRegionHeight() -> a
    void setRegion(float,float,float,float) -> a
    void setRegion(int,int,int,int) -> a
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int) -> a
    int getRegionWidth() -> b
    int getRegionX() -> c
    int getRegionY() -> d
    com.badlogic.gdx.graphics.Texture getTexture() -> e
    float getU() -> f
    float getU2() -> g
    float getV() -> h
    float getV2() -> i
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int ETC1_RGB8_OES -> b
    int PKM_HEADER_SIZE -> a
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> a
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$a:
    int dataOffset -> d
    java.nio.ByteBuffer compressedData -> c
    int height -> b
    int width -> a
    void dispose() -> a
    boolean hasPKMHeader() -> t
    void checkNPOT() -> u
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.a:
    com.badlogic.gdx.files.FileHandle file -> a
    boolean isPrepared -> f
    int width -> d
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    int height -> e
    boolean useMipMaps -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    boolean useMipMaps -> f
    boolean isPrepared -> g
    int width -> b
    int height -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> com.badlogic.gdx.graphics.glutils.c:
    int defaultFramebufferHandle -> j
    com.badlogic.gdx.utils.Array textureAttachments -> a
    boolean defaultFramebufferHandleInitialized -> k
    java.util.Map buffers -> i
    boolean hasDepthStencilPackedBuffer -> f
    int stencilbufferHandle -> d
    boolean isMRT -> g
    int depthStencilPackedBufferHandle -> e
    int framebufferHandle -> b
    int depthbufferHandle -> c
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder bufferBuilder -> h
    void addManagedFrameBuffer(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.GLFrameBuffer) -> a
    void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> a
    com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec) -> a
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> b
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> b
    void build() -> t
    void checkValidBuilder() -> u
    java.lang.String getManagedStatus() -> v
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec -> com.badlogic.gdx.graphics.glutils.c$a:
    int internalFormat -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec -> com.badlogic.gdx.graphics.glutils.c$b:
    boolean isFloat -> a
    boolean isDepth -> b
    boolean isStencil -> c
    boolean isColorTexture() -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder -> com.badlogic.gdx.graphics.glutils.c$c:
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec packedStencilDepthRenderBufferSpec -> f
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec depthRenderBufferSpec -> e
    com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec stencilRenderBufferSpec -> d
    boolean hasPackedStencilDepthRenderBuffer -> i
    com.badlogic.gdx.utils.Array textureAttachmentSpecs -> c
    boolean hasStencilRenderBuffer -> g
    boolean hasDepthRenderBuffer -> h
    int height -> b
    int width -> a
com.badlogic.gdx.graphics.glutils.GLVersion -> com.badlogic.gdx.graphics.glutils.d:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type type -> b
    int majorVersion -> a
    void extractVersion(java.lang.String,java.lang.String) -> a
    int getMajorVersion() -> a
    int parseInt(java.lang.String,int) -> a
com.badlogic.gdx.graphics.glutils.GLVersion$Type -> com.badlogic.gdx.graphics.glutils.d$a:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL -> c
    com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES -> b
    com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE -> d
    com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL -> a
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES -> e
com.badlogic.gdx.graphics.glutils.HdpiMode -> com.badlogic.gdx.graphics.glutils.e:
    com.badlogic.gdx.graphics.glutils.HdpiMode Pixels -> b
    com.badlogic.gdx.graphics.glutils.HdpiMode Logical -> a
    com.badlogic.gdx.graphics.glutils.HdpiMode[] $VALUES -> c
com.badlogic.gdx.graphics.glutils.HdpiUtils -> com.badlogic.gdx.graphics.glutils.f:
    com.badlogic.gdx.graphics.glutils.HdpiMode mode -> a
    void glScissor(int,int,int,int) -> a
    int toBackBufferX(int) -> a
    void glViewport(int,int,int,int) -> b
    int toBackBufferY(int) -> b
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.h:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float) -> a
    void color(float,float,float,float) -> a
    void color(com.badlogic.gdx.graphics.Color) -> a
    void vertex(float,float,float) -> a
    int getNumVertices() -> e
    int getMaxVertices() -> f
    void end() -> g
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.g:
    java.lang.String[] shaderUniformNames -> l
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> f
    float[] vertices -> k
    com.badlogic.gdx.graphics.Mesh mesh -> e
    int vertexSize -> h
    int colorOffset -> i
    int numTexCoords -> g
    int numVertices -> d
    com.badlogic.gdx.math.Matrix4 projModelView -> j
    int vertexIdx -> b
    int maxVertices -> c
    int primitiveType -> a
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> a
    void color(float) -> a
    void color(float,float,float,float) -> a
    void color(com.badlogic.gdx.graphics.Color) -> a
    void flush() -> a
    void vertex(float,float,float) -> a
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int) -> b
    java.lang.String createFragmentShader(boolean,boolean,int) -> c
    java.lang.String createVertexShader(boolean,boolean,int) -> d
    int getNumVertices() -> e
    int getMaxVertices() -> f
    void end() -> g
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.i:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    void dispose() -> a
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.j:
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    java.nio.ShortBuffer buffer -> a
    int bufferHandle -> d
    boolean empty -> h
    java.nio.ByteBuffer byteBuffer -> b
    boolean ownsBuffer -> c
    void dispose() -> a
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.k:
    boolean isBound -> e
    int usage -> f
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirty -> d
    void dispose() -> a
    void setIndices(short[],int,int) -> a
    int createBufferObject() -> b
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.l:
    void dispose() -> a
    void setIndices(short[],int,int) -> a
    void invalidate() -> d
    java.nio.ShortBuffer getBuffer() -> h
    void unbind() -> i
    int getNumMaxIndices() -> j
    void bind() -> k
    int getNumIndices() -> l
com.badlogic.gdx.graphics.glutils.InstanceData -> com.badlogic.gdx.graphics.glutils.m:
    void dispose() -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    int getNumInstances() -> s
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.n:
    boolean useMipMaps -> m
    com.badlogic.gdx.files.FileHandle file -> a
    java.nio.ByteBuffer compressedData -> l
    int numberOfMipmapLevels -> j
    int imagePos -> k
    int numberOfArrayElements -> h
    int numberOfFaces -> i
    int pixelHeight -> f
    int pixelDepth -> g
    int glInternalFormat -> d
    int pixelWidth -> e
    int glType -> b
    int glFormat -> c
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    int getWidth() -> b
    int getHeight() -> c
    void prepare() -> d
    boolean isManaged() -> e
    boolean isPrepared() -> f
    boolean disposePixmap() -> g
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    void consumeCubemapData() -> k
    void disposePreparedData() -> l
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.o:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> a
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> c
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.p:
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> i
    int vertexShaderHandle -> l
    int fragmentShaderHandle -> m
    boolean invalidated -> p
    com.badlogic.gdx.utils.ObjectIntMap attributes -> g
    java.nio.IntBuffer params -> q
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> h
    int program -> k
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> e
    java.lang.String fragmentShaderSource -> o
    java.lang.String vertexShaderSource -> n
    java.lang.String[] uniformNames -> f
    java.nio.IntBuffer type -> r
    boolean pedantic -> s
    java.lang.String prependFragmentCode -> u
    java.lang.String prependVertexCode -> t
    com.badlogic.gdx.utils.ObjectMap shaders -> v
    java.lang.String[] attributeNames -> j
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> c
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> d
    java.lang.String log -> a
    boolean isCompiled -> b
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void compileShaders(java.lang.String,java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void disableVertexAttribute(java.lang.String) -> a
    void dispose() -> a
    int fetchUniformLocation(java.lang.String,boolean) -> a
    int loadShader(int,java.lang.String) -> a
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformi(java.lang.String,int) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void enableVertexAttribute(int) -> b
    int getAttributeLocation(java.lang.String) -> b
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int linkProgram(int) -> c
    int fetchUniformLocation(java.lang.String) -> d
    void bind() -> k
    int createProgram() -> t
    java.lang.String getLog() -> u
    boolean isCompiled() -> v
    void checkManaged() -> w
    void fetchAttributes() -> x
    void fetchUniforms() -> y
    java.lang.String getManagedStatus() -> z
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.graphics.Color color -> g
    float defaultRectLineWidth -> j
    boolean autoShapeType -> i
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> h
    com.badlogic.gdx.math.Vector2 tmp -> f
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void box(float,float,float,float,float,float) -> a
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> a
    void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> a
    void point(float,float,float) -> a
    void rect(float,float,float,float,float,float,float,float,float) -> a
    void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> a
    void rectLine(float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void line(float,float,float,float) -> b
    void line(float,float,float,float,float,float) -> b
    void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> b
    void setAutoShapeType(boolean) -> b
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void rect(float,float,float,float) -> c
    void end() -> g
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> p
    void begin() -> r
    boolean isDrawing() -> t
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.q$a:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> b
    int glType -> a
    int getGlType() -> a
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.r:
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    void dispose() -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.s:
    java.nio.FloatBuffer buffer -> b
    int usage -> f
    boolean isDirty -> g
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> e
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    boolean ownsBuffer -> d
    void dispose() -> a
    void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void setUsage(int) -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.t:
    java.nio.FloatBuffer buffer -> b
    boolean isDirect -> e
    int usage -> f
    int bufferHandle -> d
    boolean isDirty -> g
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    void dispose() -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    int createBufferObject() -> c
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.badlogic.gdx.graphics.glutils.u:
    java.nio.FloatBuffer buffer -> b
    java.nio.IntBuffer tmpHandle -> k
    int vaoHandle -> i
    int usage -> f
    boolean isDirty -> g
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> e
    boolean isBound -> h
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    com.badlogic.gdx.utils.IntArray cachedLocations -> j
    boolean ownsBuffer -> d
    void bindData(com.badlogic.gdx.graphics.GL20) -> a
    void dispose() -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void bufferChanged() -> b
    void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> c
    void createVAO() -> c
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    void deleteVAO() -> g
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.v:
    void dispose() -> a
    void setVertices(float[],int,int) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    int getNumVertices() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.maps.ImageResolver -> a.a.a.u.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver -> a.a.a.u.a$a:
    com.badlogic.gdx.utils.ObjectMap images -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.Map -> a.a.a.u.b:
    com.badlogic.gdx.maps.MapLayers layers -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    com.badlogic.gdx.maps.MapLayers getLayers() -> t
    com.badlogic.gdx.maps.MapProperties getProperties() -> u
com.badlogic.gdx.maps.MapGroupLayer -> a.a.a.u.c:
    com.badlogic.gdx.maps.MapLayers layers -> k
    void invalidateRenderOffset() -> g
    com.badlogic.gdx.maps.MapLayers getLayers() -> i
com.badlogic.gdx.maps.MapLayer -> a.a.a.u.d:
    com.badlogic.gdx.maps.MapProperties properties -> j
    float renderOffsetY -> f
    float renderOffsetX -> e
    float offsetY -> d
    float offsetX -> c
    com.badlogic.gdx.maps.MapLayer parent -> h
    com.badlogic.gdx.maps.MapObjects objects -> i
    boolean renderOffsetDirty -> g
    float opacity -> a
    boolean visible -> b
    void calculateRenderOffsets() -> a
    void setName(java.lang.String) -> a
    void setOffsetX(float) -> a
    void setParent(com.badlogic.gdx.maps.MapLayer) -> a
    void setVisible(boolean) -> a
    com.badlogic.gdx.maps.MapObjects getObjects() -> b
    void setOffsetY(float) -> b
    float getOpacity() -> c
    void setOpacity(float) -> c
    com.badlogic.gdx.maps.MapProperties getProperties() -> d
    float getRenderOffsetX() -> e
    float getRenderOffsetY() -> f
    void invalidateRenderOffset() -> g
    boolean isVisible() -> h
com.badlogic.gdx.maps.MapLayers -> a.a.a.u.e:
    com.badlogic.gdx.utils.Array layers -> a
    void add(com.badlogic.gdx.maps.MapLayer) -> a
    com.badlogic.gdx.maps.MapLayer get(int) -> a
    int size() -> a
com.badlogic.gdx.maps.MapObject -> a.a.a.u.f:
    com.badlogic.gdx.maps.MapProperties properties -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
    void setName(java.lang.String) -> a
    void setVisible(boolean) -> a
com.badlogic.gdx.maps.MapObjects -> a.a.a.u.g:
    com.badlogic.gdx.utils.Array objects -> a
    void add(com.badlogic.gdx.maps.MapObject) -> a
com.badlogic.gdx.maps.MapProperties -> a.a.a.u.h:
    com.badlogic.gdx.utils.ObjectMap properties -> a
    java.lang.Object get(java.lang.String) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void put(java.lang.String,java.lang.Object) -> a
com.badlogic.gdx.maps.MapRenderer -> a.a.a.u.i:
com.badlogic.gdx.maps.objects.EllipseMapObject -> a.a.a.u.j.a:
com.badlogic.gdx.maps.objects.PolygonMapObject -> a.a.a.u.j.b:
com.badlogic.gdx.maps.objects.PolylineMapObject -> a.a.a.u.j.c:
com.badlogic.gdx.maps.objects.RectangleMapObject -> a.a.a.u.j.d:
com.badlogic.gdx.maps.objects.TextureMapObject -> a.a.a.u.j.e:
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> b
    void setRotation(float) -> a
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> b
    void setScaleX(float) -> b
    void setScaleY(float) -> c
    void setX(float) -> d
    void setY(float) -> e
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader -> a.a.a.u.k.a:
    com.badlogic.gdx.maps.tiled.TiledMap map -> j
    com.badlogic.gdx.utils.XmlReader xml -> b
    int mapWidthInPixels -> h
    com.badlogic.gdx.utils.XmlReader$Element root -> c
    int mapHeightInPixels -> i
    boolean flipY -> e
    int mapTileWidth -> f
    int mapTileHeight -> g
    boolean convertObjectToTileSpace -> d
    void addStaticTiledMapTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.graphics.g2d.TextureRegion,int,float,float) -> a
    void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle) -> a
    void addTileObjectGroup(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.Object castProperty(java.lang.String,java.lang.String,java.lang.String) -> a
    com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile createAnimatedTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element,int) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    int[] getTileIds(com.badlogic.gdx.utils.XmlReader$Element,int,int) -> a
    void loadBasicLayerInfo(com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadImageLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> a
    void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapObjects,com.badlogic.gdx.utils.XmlReader$Element,float) -> a
    void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadObjectGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadTileSet(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> a
    com.badlogic.gdx.maps.tiled.TiledMap loadTiledMap(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters,com.badlogic.gdx.maps.ImageResolver) -> a
    int unsignedByteToInt(byte) -> a
    void addTileProperties(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element) -> b
    void loadLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> b
    void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element) -> b
    void loadLayerGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> c
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters -> a.a.a.u.k.a$a:
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> b
    boolean flipY -> e
    boolean generateMipMaps -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> c
    boolean convertObjectToTileSpace -> d
com.badlogic.gdx.maps.tiled.TiledMap -> a.a.a.u.k.b:
    com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets -> c
    void setOwnedResources(com.badlogic.gdx.utils.Array) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets() -> v
com.badlogic.gdx.maps.tiled.TiledMapImageLayer -> a.a.a.u.k.c:
    float x -> l
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> k
    float y -> m
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> i
    float getX() -> j
    float getY() -> k
com.badlogic.gdx.maps.tiled.TiledMapRenderer -> a.a.a.u.k.d:
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> a
com.badlogic.gdx.maps.tiled.TiledMapTile -> a.a.a.u.k.e:
    float getOffsetX() -> a
    void setId(int) -> a
    void setOffsetX(float) -> a
    int getId() -> b
    void setOffsetY(float) -> b
    com.badlogic.gdx.maps.MapObjects getObjects() -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> d
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
    float getOffsetY() -> f
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode -> a.a.a.u.k.e$a:
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] $VALUES -> c
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA -> b
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE -> a
com.badlogic.gdx.maps.tiled.TiledMapTileLayer -> a.a.a.u.k.f:
    int tileHeight -> n
    int height -> l
    int tileWidth -> m
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells -> o
    int width -> k
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell getCell(int,int) -> a
    void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell) -> a
    int getHeight() -> i
    int getTileHeight() -> j
    int getTileWidth() -> k
    int getWidth() -> l
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell -> a.a.a.u.k.f$a:
    com.badlogic.gdx.maps.tiled.TiledMapTile tile -> a
    int rotation -> d
    boolean flipHorizontally -> b
    boolean flipVertically -> c
    boolean getFlipHorizontally() -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipHorizontally(boolean) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setRotation(int) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setTile(com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
    boolean getFlipVertically() -> b
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipVertically(boolean) -> b
    int getRotation() -> c
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile() -> d
com.badlogic.gdx.maps.tiled.TiledMapTileSet -> a.a.a.u.k.g:
    com.badlogic.gdx.utils.IntMap tiles -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
    void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
    void setName(java.lang.String) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileSets -> a.a.a.u.k.h:
    com.badlogic.gdx.utils.Array tilesets -> a
    void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
com.badlogic.gdx.maps.tiled.TmxMapLoader -> a.a.a.u.k.i:
    void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.Array getDependencyFileHandles(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> a
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String) -> b
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters -> a.a.a.u.k.i$a:
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject -> a.a.a.u.k.j.a:
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer -> a.a.a.u.k.k.a:
    com.badlogic.gdx.math.Rectangle imageBounds -> e
    com.badlogic.gdx.graphics.g2d.Batch batch -> c
    float[] vertices -> f
    float unitScale -> b
    com.badlogic.gdx.maps.tiled.TiledMap map -> a
    com.badlogic.gdx.math.Rectangle viewBounds -> d
    void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer) -> a
    void renderMapLayer(com.badlogic.gdx.maps.MapLayer) -> a
    void renderObject(com.badlogic.gdx.maps.MapObject) -> a
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> a
    void renderObjects(com.badlogic.gdx.maps.MapLayer) -> b
    void beginRender() -> t
    void endRender() -> u
    void render() -> v
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer -> a.a.a.u.k.k.b:
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> a
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile -> a.a.a.u.k.l.a:
    com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] frameTiles -> d
    com.badlogic.gdx.maps.MapObjects objects -> c
    long initialTimeOffset -> h
    long lastTiledMapRenderTime -> g
    int[] animationIntervals -> e
    int loopDuration -> f
    com.badlogic.gdx.maps.MapProperties properties -> b
    int id -> a
    float getOffsetX() -> a
    void setId(int) -> a
    void setOffsetX(float) -> a
    int getId() -> b
    void setOffsetY(float) -> b
    com.badlogic.gdx.maps.MapObjects getObjects() -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> d
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
    float getOffsetY() -> f
    com.badlogic.gdx.maps.tiled.TiledMapTile getCurrentFrame() -> g
    int getCurrentFrameIndex() -> h
    void updateAnimationBaseTime() -> i
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile -> a.a.a.u.k.l.b:
    com.badlogic.gdx.maps.MapObjects objects -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> d
    float offsetY -> f
    float offsetX -> e
    com.badlogic.gdx.maps.MapProperties properties -> b
    int id -> a
    float getOffsetX() -> a
    void setId(int) -> a
    void setOffsetX(float) -> a
    int getId() -> b
    void setOffsetY(float) -> b
    com.badlogic.gdx.maps.MapObjects getObjects() -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> d
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
    float getOffsetY() -> f
com.badlogic.gdx.math.Affine2 -> com.badlogic.gdx.math.a:
    float m12 -> f
    float m11 -> e
    float m10 -> d
    float m02 -> c
    float m01 -> b
    float m00 -> a
    com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2) -> a
    com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float) -> a
    com.badlogic.gdx.math.Affine2 translate(float,float) -> a
com.badlogic.gdx.math.Ellipse -> com.badlogic.gdx.math.b:
    float height -> d
    float width -> c
    float y -> b
    float x -> a
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.c:
    com.badlogic.gdx.math.Vector3[] planePoints -> b
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> d
    float[] clipSpacePlanePointsArray -> e
    float[] planePointsArray -> c
    com.badlogic.gdx.math.Plane[] planes -> a
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.d:
    java.util.Random random -> a
    float cosDeg(float) -> a
    boolean isEqual(float,float,float) -> a
    boolean isPowerOfTwo(int) -> a
    int nextPowerOfTwo(int) -> b
    float sinDeg(float) -> b
    int random(int) -> c
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.d$a:
    float[] table -> a
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    com.badlogic.gdx.math.Vector3 l_vey -> d
    com.badlogic.gdx.math.Vector3 tmpVec -> e
    com.badlogic.gdx.math.Vector3 l_vez -> b
    com.badlogic.gdx.math.Vector3 l_vex -> c
    com.badlogic.gdx.math.Matrix4 tmpMat -> f
    float[] val -> a
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> a
    void mul(float[],float[]) -> a
    com.badlogic.gdx.math.Matrix4 scl(float) -> a
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2) -> a
    com.badlogic.gdx.math.Matrix4 set(float[]) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float) -> a
    float det(float[]) -> b
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> b
    boolean inv(float[]) -> c
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.e:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
com.badlogic.gdx.math.Polygon -> com.badlogic.gdx.math.f:
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Polyline -> com.badlogic.gdx.math.g:
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.h:
    float w -> d
    float z -> c
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Quaternion idt() -> a
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
com.badlogic.gdx.math.RandomXS128 -> com.badlogic.gdx.math.i:
    long seed1 -> b
    long seed0 -> a
    long nextLong(long) -> a
    void setState(long,long) -> a
    long murmurHash3(long) -> b
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.j:
    com.badlogic.gdx.math.Rectangle tmp -> e
    float height -> d
    float width -> c
    float y -> b
    float x -> a
    boolean contains(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> a
    boolean overlaps(com.badlogic.gdx.math.Rectangle) -> b
com.badlogic.gdx.math.Shape2D -> com.badlogic.gdx.math.k:
com.badlogic.gdx.math.Vector -> com.badlogic.gdx.math.n:
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.l:
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2) -> a
    float len() -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 nor() -> b
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> b
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.m:
    float z -> c
    float y -> b
    float x -> a
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> a
    float len2() -> a
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    com.badlogic.gdx.math.Vector3 crs(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 nor() -> b
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    float dot(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> c
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> d
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> e
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.o.a:
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 origin -> a
com.badlogic.gdx.net.NetJavaImpl -> a.a.a.v.a:
com.badlogic.gdx.net.NetJavaImpl$1 -> a.a.a.v.a$a:
    java.util.concurrent.atomic.AtomicInteger threadID -> a
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
    com.badlogic.gdx.physics.box2d.Transform transform -> f
    com.badlogic.gdx.utils.Array joints -> e
    long addr -> a
    com.badlogic.gdx.utils.Array fixtures -> d
    com.badlogic.gdx.physics.box2d.World world -> c
    com.badlogic.gdx.math.Vector2 position -> g
    float[] tmp -> b
    com.badlogic.gdx.math.Vector2 linearVelocity -> h
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.Shape,float) -> a
    void destroyFixture(com.badlogic.gdx.physics.box2d.Fixture) -> a
    com.badlogic.gdx.utils.Array getFixtureList() -> a
    void reset(long) -> a
    void setUserData(java.lang.Object) -> a
    com.badlogic.gdx.utils.Array getJointList() -> b
    com.badlogic.gdx.math.Vector2 getLinearVelocity() -> c
    com.badlogic.gdx.math.Vector2 getPosition() -> d
    com.badlogic.gdx.physics.box2d.Transform getTransform() -> e
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType getType() -> f
    boolean isActive() -> g
    boolean isAwake() -> h
com.badlogic.gdx.physics.box2d.BodyDef -> com.badlogic.gdx.physics.box2d.a:
    boolean awake -> i
    float angularDamping -> g
    boolean fixedRotation -> j
    float linearDamping -> f
    boolean bullet -> k
    float angularVelocity -> e
    boolean active -> l
    float angle -> c
    com.badlogic.gdx.math.Vector2 linearVelocity -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType type -> a
    com.badlogic.gdx.math.Vector2 position -> b
    boolean allowSleep -> h
    float gravityScale -> m
com.badlogic.gdx.physics.box2d.BodyDef$BodyType -> com.badlogic.gdx.physics.box2d.a$a:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody -> c
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody -> b
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] $VALUES -> e
    int value -> a
    int getValue() -> a
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer -> com.badlogic.gdx.physics.box2d.b:
    com.badlogic.gdx.math.Vector2 lower -> t
    com.badlogic.gdx.math.Vector2 lv -> r
    com.badlogic.gdx.graphics.Color SHAPE_NOT_ACTIVE -> h
    com.badlogic.gdx.math.Vector2 f -> p
    com.badlogic.gdx.graphics.Color SHAPE_KINEMATIC -> j
    com.badlogic.gdx.utils.Array bodies -> v
    com.badlogic.gdx.math.Vector2[] vertices -> s
    com.badlogic.gdx.graphics.glutils.ShapeRenderer renderer -> a
    boolean drawVelocities -> f
    com.badlogic.gdx.graphics.Color SHAPE_AWAKE -> l
    com.badlogic.gdx.graphics.Color AABB_COLOR -> n
    com.badlogic.gdx.math.Vector2 t -> x
    boolean drawBodies -> b
    boolean drawAABBs -> d
    com.badlogic.gdx.math.Vector2 v -> q
    com.badlogic.gdx.graphics.Color SHAPE_STATIC -> i
    com.badlogic.gdx.graphics.Color SHAPE_NOT_AWAKE -> k
    com.badlogic.gdx.utils.Array joints -> w
    boolean drawInactiveBodies -> e
    com.badlogic.gdx.graphics.Color JOINT_COLOR -> m
    com.badlogic.gdx.math.Vector2 axis -> y
    boolean drawContacts -> g
    com.badlogic.gdx.graphics.Color VELOCITY_COLOR -> o
    com.badlogic.gdx.math.Vector2 upper -> u
    boolean drawJoints -> c
    void drawAABB(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Transform) -> a
    void drawContact(com.badlogic.gdx.physics.box2d.Contact) -> a
    void drawJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void drawSegment(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.graphics.Color) -> a
    void drawShape(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Transform,com.badlogic.gdx.graphics.Color) -> a
    void drawSolidCircle(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.graphics.Color) -> a
    void drawSolidPolygon(com.badlogic.gdx.math.Vector2[],int,com.badlogic.gdx.graphics.Color,boolean) -> a
    void render(com.badlogic.gdx.physics.box2d.World,com.badlogic.gdx.math.Matrix4) -> a
    void renderBodies(com.badlogic.gdx.physics.box2d.World) -> a
    void renderBody(com.badlogic.gdx.physics.box2d.Body) -> a
    com.badlogic.gdx.graphics.Color getColorByBody(com.badlogic.gdx.physics.box2d.Body) -> b
com.badlogic.gdx.physics.box2d.ChainShape -> com.badlogic.gdx.physics.box2d.ChainShape:
    float[] verts -> b
    void getVertex(int,com.badlogic.gdx.math.Vector2) -> a
    int getVertexCount() -> c
com.badlogic.gdx.physics.box2d.CircleShape -> com.badlogic.gdx.physics.box2d.CircleShape:
    com.badlogic.gdx.math.Vector2 position -> c
    float[] tmp -> b
    com.badlogic.gdx.math.Vector2 getPosition() -> c
com.badlogic.gdx.physics.box2d.Contact -> com.badlogic.gdx.physics.box2d.Contact:
    com.badlogic.gdx.physics.box2d.WorldManifold worldManifold -> c
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> b
    float[] tmp -> d
    com.badlogic.gdx.physics.box2d.Fixture getFixtureA() -> a
    com.badlogic.gdx.physics.box2d.WorldManifold getWorldManifold() -> b
com.badlogic.gdx.physics.box2d.ContactFilter -> com.badlogic.gdx.physics.box2d.c:
    boolean shouldCollide(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.physics.box2d.Fixture) -> a
com.badlogic.gdx.physics.box2d.ContactImpulse -> com.badlogic.gdx.physics.box2d.ContactImpulse:
    long addr -> a
com.badlogic.gdx.physics.box2d.ContactListener -> com.badlogic.gdx.physics.box2d.d:
    void beginContact(com.badlogic.gdx.physics.box2d.Contact) -> a
    void postSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.ContactImpulse) -> a
    void preSolve(com.badlogic.gdx.physics.box2d.Contact,com.badlogic.gdx.physics.box2d.Manifold) -> a
    void endContact(com.badlogic.gdx.physics.box2d.Contact) -> b
com.badlogic.gdx.physics.box2d.EdgeShape -> com.badlogic.gdx.physics.box2d.EdgeShape:
    float[] vertex -> b
    void getVertex1(com.badlogic.gdx.math.Vector2) -> a
    void getVertex2(com.badlogic.gdx.math.Vector2) -> b
com.badlogic.gdx.physics.box2d.Filter -> com.badlogic.gdx.physics.box2d.e:
    short groupIndex -> c
    short categoryBits -> a
    short maskBits -> b
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.Fixture:
    com.badlogic.gdx.physics.box2d.Shape shape -> c
    com.badlogic.gdx.physics.box2d.Filter filter -> e
    long addr -> b
    short[] tmp -> d
    com.badlogic.gdx.physics.box2d.Body body -> a
    com.badlogic.gdx.physics.box2d.Body getBody() -> a
    void reset(com.badlogic.gdx.physics.box2d.Body,long) -> a
    void setUserData(java.lang.Object) -> a
    com.badlogic.gdx.physics.box2d.Filter getFilterData() -> b
    com.badlogic.gdx.physics.box2d.Shape getShape() -> c
    com.badlogic.gdx.physics.box2d.Shape$Type getType() -> d
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.Joint:
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA -> d
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> b
    float[] tmp -> c
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB -> e
    com.badlogic.gdx.math.Vector2 anchorB -> g
    com.badlogic.gdx.math.Vector2 anchorA -> f
    com.badlogic.gdx.math.Vector2 getAnchorA() -> a
    void setUserData(java.lang.Object) -> a
    com.badlogic.gdx.math.Vector2 getAnchorB() -> b
    com.badlogic.gdx.physics.box2d.Body getBodyA() -> c
    com.badlogic.gdx.physics.box2d.Body getBodyB() -> d
    com.badlogic.gdx.physics.box2d.JointDef$JointType getType() -> e
com.badlogic.gdx.physics.box2d.JointDef$JointType -> com.badlogic.gdx.physics.box2d.f:
    com.badlogic.gdx.physics.box2d.JointDef$JointType Unknown -> a
    com.badlogic.gdx.physics.box2d.JointDef$JointType RevoluteJoint -> b
    com.badlogic.gdx.physics.box2d.JointDef$JointType PrismaticJoint -> c
    com.badlogic.gdx.physics.box2d.JointDef$JointType DistanceJoint -> d
    com.badlogic.gdx.physics.box2d.JointDef$JointType PulleyJoint -> e
    com.badlogic.gdx.physics.box2d.JointDef$JointType MouseJoint -> f
    com.badlogic.gdx.physics.box2d.JointDef$JointType GearJoint -> g
    com.badlogic.gdx.physics.box2d.JointDef$JointType WheelJoint -> h
    com.badlogic.gdx.physics.box2d.JointDef$JointType WeldJoint -> i
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] $VALUES -> n
    com.badlogic.gdx.physics.box2d.JointDef$JointType FrictionJoint -> j
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] valueTypes -> m
    com.badlogic.gdx.physics.box2d.JointDef$JointType RopeJoint -> k
    com.badlogic.gdx.physics.box2d.JointDef$JointType MotorJoint -> l
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.g:
    com.badlogic.gdx.physics.box2d.Joint joint -> b
    com.badlogic.gdx.physics.box2d.Body other -> a
com.badlogic.gdx.physics.box2d.Manifold -> com.badlogic.gdx.physics.box2d.Manifold:
    long addr -> a
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint -> com.badlogic.gdx.physics.box2d.Manifold$a:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    float tangentImpulse -> c
    float normalImpulse -> b
    int contactID -> d
com.badlogic.gdx.physics.box2d.MassData -> com.badlogic.gdx.physics.box2d.h:
com.badlogic.gdx.physics.box2d.PolygonShape -> com.badlogic.gdx.physics.box2d.PolygonShape:
    float[] verts -> b
    void getVertex(int,com.badlogic.gdx.math.Vector2) -> a
    void setAsBox(float,float) -> a
    int getVertexCount() -> c
com.badlogic.gdx.physics.box2d.QueryCallback -> com.badlogic.gdx.physics.box2d.i:
    boolean reportFixture(com.badlogic.gdx.physics.box2d.Fixture) -> a
com.badlogic.gdx.physics.box2d.RayCastCallback -> com.badlogic.gdx.physics.box2d.j:
    float reportRayFixture(com.badlogic.gdx.physics.box2d.Fixture,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float) -> a
com.badlogic.gdx.physics.box2d.Shape -> com.badlogic.gdx.physics.box2d.Shape:
    long addr -> a
    void dispose() -> a
    float getRadius() -> b
com.badlogic.gdx.physics.box2d.Shape$Type -> com.badlogic.gdx.physics.box2d.Shape$a:
    com.badlogic.gdx.physics.box2d.Shape$Type Polygon -> c
    com.badlogic.gdx.physics.box2d.Shape$Type Chain -> d
    com.badlogic.gdx.physics.box2d.Shape$Type Circle -> a
    com.badlogic.gdx.physics.box2d.Shape$Type[] $VALUES -> e
    com.badlogic.gdx.physics.box2d.Shape$Type Edge -> b
com.badlogic.gdx.physics.box2d.Transform -> com.badlogic.gdx.physics.box2d.k:
    com.badlogic.gdx.math.Vector2 position -> b
    float[] vals -> a
    com.badlogic.gdx.math.Vector2 getPosition() -> a
    com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    com.badlogic.gdx.utils.Pool freeBodies -> a
    com.badlogic.gdx.utils.Pool freeFixtures -> b
    com.badlogic.gdx.math.Vector2 rayPoint -> q
    com.badlogic.gdx.math.Vector2 rayNormal -> r
    com.badlogic.gdx.physics.box2d.ContactFilter contactFilter -> g
    com.badlogic.gdx.utils.LongMap fixtures -> e
    com.badlogic.gdx.utils.LongMap joints -> f
    long addr -> c
    com.badlogic.gdx.physics.box2d.RayCastCallback rayCastCallback -> p
    com.badlogic.gdx.physics.box2d.QueryCallback queryCallback -> i
    com.badlogic.gdx.physics.box2d.Manifold manifold -> n
    com.badlogic.gdx.utils.LongMap bodies -> d
    com.badlogic.gdx.physics.box2d.ContactListener contactListener -> h
    long[] contactAddrs -> j
    com.badlogic.gdx.utils.Array freeContacts -> l
    com.badlogic.gdx.utils.Array contacts -> k
    com.badlogic.gdx.physics.box2d.ContactImpulse impulse -> o
    com.badlogic.gdx.physics.box2d.Contact contact -> m
    com.badlogic.gdx.physics.box2d.Body createBody(com.badlogic.gdx.physics.box2d.BodyDef) -> a
    void destroyBody(com.badlogic.gdx.physics.box2d.Body) -> a
    void destroyFixture(com.badlogic.gdx.physics.box2d.Body,com.badlogic.gdx.physics.box2d.Fixture) -> a
    void destroyJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void dispose() -> a
    void getBodies(com.badlogic.gdx.utils.Array) -> a
    void step(float,int,int) -> a
    void getJoints(com.badlogic.gdx.utils.Array) -> b
    int getContactCount() -> t
    com.badlogic.gdx.utils.Array getContactList() -> u
com.badlogic.gdx.physics.box2d.World$1 -> com.badlogic.gdx.physics.box2d.World$a:
    com.badlogic.gdx.physics.box2d.World this$0 -> d
    com.badlogic.gdx.physics.box2d.Body newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.World$2 -> com.badlogic.gdx.physics.box2d.World$b:
    com.badlogic.gdx.physics.box2d.Fixture newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.WorldManifold -> com.badlogic.gdx.physics.box2d.l:
    com.badlogic.gdx.math.Vector2 normal -> a
    com.badlogic.gdx.math.Vector2[] points -> b
    float[] separations -> c
    int numContactPoints -> d
    int getNumberOfContactPoints() -> a
    com.badlogic.gdx.math.Vector2[] getPoints() -> b
com.badlogic.gdx.physics.box2d.joints.PulleyJoint -> com.badlogic.gdx.physics.box2d.joints.PulleyJoint:
    float[] tmp -> h
    com.badlogic.gdx.math.Vector2 groundAnchorA -> i
    com.badlogic.gdx.math.Vector2 groundAnchorB -> j
    com.badlogic.gdx.math.Vector2 getGroundAnchorA() -> f
    com.badlogic.gdx.math.Vector2 getGroundAnchorB() -> g
com.badlogic.gdx.scenes.scene2d.Action -> a.a.a.w.a.a:
    com.badlogic.gdx.utils.Pool pool -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> a
    boolean act(float) -> a
    void reset() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void restart() -> b
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
com.badlogic.gdx.scenes.scene2d.Actor -> a.a.a.w.a.b:
    float width -> l
    java.lang.String name -> f
    float y -> k
    float x -> j
    boolean debug -> i
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> g
    com.badlogic.gdx.scenes.scene2d.Group parent -> b
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> c
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> d
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.utils.Array actions -> e
    float rotation -> r
    boolean visible -> h
    float scaleY -> q
    float scaleX -> p
    float originY -> o
    float originX -> n
    com.badlogic.gdx.graphics.Color color -> s
    float height -> m
    float getY() -> A
    boolean hasKeyboardFocus() -> B
    boolean isVisible() -> C
    void positionChanged() -> D
    boolean remove() -> E
    void sizeChanged() -> F
    void act(float) -> a
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean clipBegin(float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void moveBy(float,float) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setDebug(boolean) -> a
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void setBounds(float,float,float,float) -> b
    void setHeight(float) -> b
    void setPosition(float,float) -> b
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> b
    void setSize(float,float) -> c
    void setWidth(float) -> c
    void clear() -> i
    void clearActions() -> j
    void clearListeners() -> k
    void clipEnd() -> l
    com.badlogic.gdx.graphics.Color getColor() -> m
    boolean getDebug() -> n
    float getHeight() -> o
    java.lang.String getName() -> p
    float getOriginX() -> q
    float getOriginY() -> r
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> s
    float getRotation() -> t
    float getScaleX() -> u
    float getScaleY() -> v
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> w
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> x
    float getWidth() -> y
    float getX() -> z
com.badlogic.gdx.scenes.scene2d.Event -> a.a.a.w.a.c:
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    boolean handled -> e
    boolean stopped -> f
    boolean cancelled -> g
    boolean bubbles -> d
    void reset() -> a
    void setCapture(boolean) -> a
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean getBubbles() -> b
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> c
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> d
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> e
    void handle() -> f
    boolean isCancelled() -> g
    boolean isHandled() -> h
    boolean isStopped() -> i
com.badlogic.gdx.scenes.scene2d.EventListener -> a.a.a.w.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> a.a.a.w.a.e:
    com.badlogic.gdx.utils.SnapshotArray children -> t
    com.badlogic.gdx.math.Matrix4 oldTransform -> w
    com.badlogic.gdx.math.Rectangle cullingArea -> y
    com.badlogic.gdx.math.Matrix4 computedTransform -> v
    com.badlogic.gdx.math.Affine2 worldTransform -> u
    com.badlogic.gdx.math.Vector2 tmp -> z
    boolean transform -> x
    void childrenChanged() -> G
    void clearChildren() -> H
    com.badlogic.gdx.math.Matrix4 computeTransform() -> I
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> J
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> K
    boolean isTransform() -> L
    void act(float) -> a
    void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4) -> a
    void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor removeActorAt(int,boolean) -> a
    void resetTransform(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void setDebug(boolean,boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    void toString(java.lang.StringBuilder,int) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float) -> b
    void setTransform(boolean) -> b
    void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> c
    void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> d
    void clear() -> i
com.badlogic.gdx.scenes.scene2d.InputEvent -> a.a.a.w.a.f:
    float scrollAmountY -> l
    int button -> n
    float scrollAmountX -> k
    int keyCode -> o
    float stageY -> j
    float stageX -> i
    int pointer -> m
    char character -> p
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> h
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> q
    boolean touchFocus -> r
    void reset() -> a
    void setButton(int) -> a
    void setCharacter(char) -> a
    void setScrollAmountX(float) -> a
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> a
    void setKeyCode(int) -> b
    void setScrollAmountY(float) -> b
    void setPointer(int) -> c
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void setStageX(float) -> c
    void setStageY(float) -> d
    int getButton() -> j
    char getCharacter() -> k
    int getKeyCode() -> l
    int getPointer() -> m
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> n
    float getScrollAmountX() -> o
    float getScrollAmountY() -> p
    boolean getTouchFocus() -> q
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> r
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> a.a.a.w.a.f$a:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
com.badlogic.gdx.scenes.scene2d.InputListener -> a.a.a.w.a.g:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> a
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> a
    boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> b
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> a.a.a.w.a.g$a:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> a.a.a.w.a.h:
    boolean actionsRequestRendering -> p
    int mouseScreenX -> j
    int mouseScreenY -> k
    com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes -> q
    com.badlogic.gdx.graphics.g2d.Batch batch -> b
    boolean debug -> w
    boolean debugAll -> r
    com.badlogic.gdx.math.Vector2 tempCoords -> e
    boolean debugUnderMouse -> s
    boolean debugParentUnderMouse -> t
    com.badlogic.gdx.scenes.scene2d.Group root -> d
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> f
    boolean[] pointerTouched -> g
    int[] pointerScreenX -> h
    int[] pointerScreenY -> i
    com.badlogic.gdx.graphics.Color debugColor -> v
    com.badlogic.gdx.utils.viewport.Viewport viewport -> a
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> o
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> m
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debugTableUnderMouse -> u
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> l
    boolean ownsBatch -> c
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> n
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> A
    com.badlogic.gdx.utils.viewport.Viewport getViewport() -> B
    float getWidth() -> C
    void unfocusAll() -> D
    void drawDebug() -> E
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void dispose() -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean keyDown(int) -> a
    boolean keyTyped(char) -> a
    boolean mouseMoved(int,int) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    boolean scrolled(float,float) -> a
    void setViewport(com.badlogic.gdx.utils.viewport.Viewport) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean isInsideViewport(int,int) -> b
    boolean keyUp(int) -> b
    boolean touchUp(int,int,int,int) -> b
    boolean setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void act(float) -> d
    boolean setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> e
    void cancelTouchFocus() -> t
    void clear() -> u
    void draw() -> v
    boolean getActionsRequestRendering() -> w
    com.badlogic.gdx.graphics.Color getDebugColor() -> x
    float getHeight() -> y
    com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus() -> z
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> a.a.a.w.a.h$a:
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    int pointer -> d
    int button -> e
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.Touchable -> a.a.a.w.a.i:
    com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES -> d
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
com.badlogic.gdx.scenes.scene2d.ui.Button -> a.a.a.w.a.j.a:
    boolean isDisabled -> t0
    boolean isChecked -> s0
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> v0
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle style -> r0
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup buttonGroup -> u0
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackgroundDrawable() -> S
    boolean isChecked() -> T
    boolean isDisabled() -> U
    boolean isOver() -> V
    boolean isPressed() -> W
    void initialize() -> X
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getMinHeight() -> a
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
    float getMinWidth() -> b
    void setChecked(boolean,boolean) -> b
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.ui.Button$1 -> a.a.a.w.a.j.a$a:
    com.badlogic.gdx.scenes.scene2d.ui.Button this$0 -> o
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> b
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> a.a.a.w.a.j.a$b:
    float unpressedOffsetX -> l
    float pressedOffsetY -> k
    float pressedOffsetX -> j
    com.badlogic.gdx.scenes.scene2d.utils.Drawable up -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable down -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable over -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable focused -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabled -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checked -> f
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedOver -> g
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedDown -> h
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedFocused -> i
    float checkedOffsetY -> o
    float checkedOffsetX -> n
    float unpressedOffsetY -> m
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup -> a.a.a.w.a.j.b:
    boolean canCheck(com.badlogic.gdx.scenes.scene2d.ui.Button,boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.Cell -> a.a.a.w.a.j.c:
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> c
    float computedPadBottom -> H
    float computedPadTop -> F
    int cellAboveIndex -> E
    int column -> C
    java.lang.Float fillY -> p
    java.lang.Integer colspan -> t
    java.lang.Boolean uniformY -> v
    float actorY -> y
    java.lang.Float onef -> K
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> m
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom -> i
    java.lang.Integer onei -> M
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> k
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop -> g
    java.lang.Integer expandX -> r
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> b
    float computedPadRight -> I
    float computedPadLeft -> G
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults -> P
    com.badlogic.gdx.Files files -> O
    int row -> D
    float actorHeight -> A
    java.lang.Float fillX -> o
    java.lang.Integer expandY -> s
    java.lang.Boolean uniformX -> u
    float actorWidth -> z
    float actorX -> x
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> l
    com.badlogic.gdx.scenes.scene2d.Actor actor -> w
    java.lang.Float zerof -> J
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> n
    java.lang.Integer zeroi -> L
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft -> h
    java.lang.Integer centeri -> N
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight -> j
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> d
    boolean endRow -> B
    java.lang.Integer align -> q
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> f
    void merge(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> a
    void reset() -> a
    void setTable(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Cell expand() -> b
    void set(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill() -> c
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults() -> d
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> a.a.a.w.a.j.d:
com.badlogic.gdx.scenes.scene2d.ui.Image -> a.a.a.w.a.j.e:
    com.badlogic.gdx.utils.Scaling scaling -> w
    float imageY -> z
    float imageX -> y
    int align -> x
    float imageHeight -> B
    float imageWidth -> A
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> C
    void layout() -> H
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable() -> I
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getMinHeight() -> a
    void setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    void setScaling(com.badlogic.gdx.utils.Scaling) -> a
    float getMinWidth() -> b
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.ui.ImageButton -> a.a.a.w.a.j.f:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> w0
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle style -> x0
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getImageDrawable() -> X
    void updateImage() -> Y
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle -> a.a.a.w.a.j.f$a:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp -> p
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown -> q
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver -> r
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled -> s
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked -> t
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedDown -> u
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver -> v
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle -> a.a.a.w.a.j.g:
com.badlogic.gdx.scenes.scene2d.ui.Label -> a.a.a.w.a.j.h:
    float fontScaleY -> H
    boolean fontScaleChanged -> I
    float fontScaleX -> G
    java.lang.String ellipsis -> J
    com.badlogic.gdx.graphics.Color tempColor -> K
    float lastPrefHeight -> E
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle style -> w
    int labelAlign -> B
    int lineAlign -> C
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> A
    com.badlogic.gdx.graphics.g2d.GlyphLayout layout -> x
    boolean prefSizeInvalid -> F
    com.badlogic.gdx.math.Vector2 prefSize -> y
    com.badlogic.gdx.utils.StringBuilder text -> z
    com.badlogic.gdx.graphics.g2d.GlyphLayout prefSizeLayout -> L
    boolean wrap -> D
    void invalidate() -> G
    void layout() -> H
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle getStyle() -> I
    com.badlogic.gdx.utils.StringBuilder getText() -> J
    void computePrefSize() -> K
    void scaleAndComputePrefSize() -> L
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setAlignment(int) -> a
    void setAlignment(int,int) -> a
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> a
    void setText(java.lang.CharSequence) -> a
    boolean textEquals(java.lang.CharSequence) -> b
    void setFontScale(float,float) -> d
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> a.a.a.w.a.j.h$a:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.Color fontColor -> b
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> a.a.a.w.a.j.i:
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle -> a.a.a.w.a.j.j:
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> a.a.a.w.a.j.k:
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> a.a.a.w.a.j.l:
com.badlogic.gdx.scenes.scene2d.ui.Skin -> a.a.a.w.a.j.m:
    java.lang.Class[] defaultTagClasses -> e
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    float scale -> c
    com.badlogic.gdx.utils.ObjectMap jsonClassTags -> d
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    java.lang.Object get(java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> a
    com.badlogic.gdx.utils.Json getJsonLoader(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    void scale(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> b
    void load(com.badlogic.gdx.files.FileHandle) -> b
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> c
    com.badlogic.gdx.utils.Array getRegions(java.lang.String) -> d
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> e
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> a.a.a.w.a.j.m$a:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> l
    boolean ignoreUnknownField(java.lang.Class,java.lang.String) -> a
    void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> a.a.a.w.a.j.m$b:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    void readNamedObjects(com.badlogic.gdx.utils.Json,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> a.a.a.w.a.j.m$c:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> a.a.a.w.a.j.m$d:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    com.badlogic.gdx.graphics.Color read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> a.a.a.w.a.j.m$e:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> a.a.a.w.a.j.m$f:
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> a.a.a.w.a.j.n:
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle -> a.a.a.w.a.j.o:
com.badlogic.gdx.scenes.scene2d.ui.Table -> a.a.a.w.a.j.p:
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom -> p0
    float[] rowMinHeight -> M
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft -> o0
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop -> n0
    boolean clip -> f0
    boolean round -> g0
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight -> q0
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> Y
    int rows -> E
    float[] expandHeight -> W
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> a0
    float[] rowHeight -> U
    float tablePrefWidth -> R
    com.badlogic.gdx.utils.Array columnDefaults -> I
    float tableMinWidth -> P
    com.badlogic.gdx.utils.Array cells -> G
    float[] rowPrefHeight -> O
    com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults -> J
    float[] columnPrefWidth -> N
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debug -> c0
    int align -> b0
    float[] columnMinWidth -> L
    boolean sizeInvalid -> K
    float[] columnWeightedWidth -> l0
    float[] rowWeightedHeight -> m0
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> X
    int columns -> D
    com.badlogic.gdx.graphics.Color debugTableColor -> h0
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> Z
    com.badlogic.gdx.graphics.Color debugCellColor -> i0
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> e0
    com.badlogic.gdx.graphics.Color debugActorColor -> j0
    com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults -> H
    com.badlogic.gdx.utils.Array debugRects -> d0
    boolean implicitEndRow -> F
    float tablePrefHeight -> S
    float[] expandWidth -> V
    com.badlogic.gdx.utils.Pool cellPool -> k0
    float tableMinHeight -> Q
    float[] columnWidth -> T
    void clearChildren() -> H
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> J
    com.badlogic.gdx.scenes.scene2d.ui.Table debugAll() -> J
    void invalidate() -> M
    void layout() -> N
    float getPadBottom() -> O
    float getPadLeft() -> P
    float getPadRight() -> Q
    float getPadTop() -> R
    void clearDebugRects() -> S
    void computeSize() -> T
    void endRow() -> U
    com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell() -> V
    void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    float[] ensureSize(float[],int) -> a
    float getMinHeight() -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor removeActorAt(int,boolean) -> a
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    void setDebug(boolean) -> a
    void setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    float getMinWidth() -> b
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void addDebugRects(float,float,float,float) -> c
    com.badlogic.gdx.scenes.scene2d.ui.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> e
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> a.a.a.w.a.j.p$a:
    com.badlogic.gdx.scenes.scene2d.ui.Cell newObject() -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> a.a.a.w.a.j.p$b:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> a.a.a.w.a.j.p$c:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> a.a.a.w.a.j.p$d:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> a.a.a.w.a.j.p$e:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug -> a.a.a.w.a.j.p$f:
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] $VALUES -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug actor -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug cell -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug none -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug table -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug all -> b
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect -> a.a.a.w.a.j.p$g:
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.utils.Pool pool -> g
com.badlogic.gdx.scenes.scene2d.ui.TextButton -> a.a.a.w.a.j.q:
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> w0
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle style -> x0
    com.badlogic.gdx.graphics.Color getFontColor() -> X
    com.badlogic.gdx.scenes.scene2d.ui.Label getLabel() -> Y
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> a
    void setText(java.lang.String) -> a
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> a.a.a.w.a.j.q$a:
    com.badlogic.gdx.graphics.Color disabledFontColor -> u
    com.badlogic.gdx.graphics.Color focusedFontColor -> t
    com.badlogic.gdx.graphics.Color checkedDownFontColor -> w
    com.badlogic.gdx.graphics.Color checkedFontColor -> v
    com.badlogic.gdx.graphics.Color checkedFocusedFontColor -> y
    com.badlogic.gdx.graphics.Color checkedOverFontColor -> x
    com.badlogic.gdx.graphics.Color fontColor -> q
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> p
    com.badlogic.gdx.graphics.Color overFontColor -> s
    com.badlogic.gdx.graphics.Color downFontColor -> r
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> a.a.a.w.a.j.r:
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle -> a.a.a.w.a.j.s:
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> a.a.a.w.a.j.t:
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle -> a.a.a.w.a.j.u:
com.badlogic.gdx.scenes.scene2d.ui.Value -> a.a.a.w.a.j.v:
    com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> g
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> f
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> a.a.a.w.a.j.v$a:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> a.a.a.w.a.j.v$b:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> a.a.a.w.a.j.v$c:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> a.a.a.w.a.j.v$d:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> a.a.a.w.a.j.v$e:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> a.a.a.w.a.j.v$f:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed -> a.a.a.w.a.j.v$g:
    float value -> h
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Widget -> a.a.a.w.a.j.w:
    boolean fillParent -> u
    boolean layoutEnabled -> v
    boolean needsLayout -> t
    void sizeChanged() -> F
    void invalidate() -> G
    void layout() -> H
    float getMinHeight() -> a
    float getMinWidth() -> b
    float getMaxHeight() -> c
    void invalidateHierarchy() -> d
    float getMaxWidth() -> e
    void validate() -> f
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> a.a.a.w.a.j.x:
    boolean needsLayout -> A
    boolean fillParent -> B
    boolean layoutEnabled -> C
    void sizeChanged() -> F
    void childrenChanged() -> G
    void invalidate() -> M
    void layout() -> N
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getMaxHeight() -> c
    void invalidateHierarchy() -> d
    float getMaxWidth() -> e
    void validate() -> f
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> a.a.a.w.a.j.y:
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> a.a.a.w.a.k.a:
    float minHeight -> g
    float minWidth -> f
    float bottomHeight -> e
    float topHeight -> d
    float rightWidth -> c
    java.lang.String name -> a
    float leftWidth -> b
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getMinHeight() -> a
    void setName(java.lang.String) -> a
    void setTopHeight(float) -> a
    float getMinWidth() -> b
    void setLeftWidth(float) -> b
    float getRightWidth() -> c
    void setMinHeight(float) -> c
    float getLeftWidth() -> d
    void setRightWidth(float) -> d
    float getBottomHeight() -> e
    void setMinWidth(float) -> e
    float getTopHeight() -> f
    void setBottomHeight(float) -> f
    java.lang.String getName() -> g
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener -> a.a.a.w.a.k.b:
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent -> a.a.a.w.a.k.b$a:
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> a.a.a.w.a.k.c:
    long visualPressedTime -> j
    int tapCount -> l
    long tapCountInterval -> k
    boolean cancelled -> i
    float touchDownY -> d
    int button -> f
    float touchDownX -> c
    float tapSquareSize -> b
    int pressedPointer -> e
    boolean pressed -> g
    boolean over -> h
    long lastTapTime -> m
    float visualPressedDuration -> n
    void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean inTapSquare(float,float) -> a
    void invalidateTapSquare() -> a
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
    void setVisualPressed(boolean) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> b
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean isOver() -> b
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    boolean isPressed() -> c
    boolean isVisualPressed() -> d
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> a.a.a.w.a.k.d:
com.badlogic.gdx.scenes.scene2d.utils.Disableable -> a.a.a.w.a.k.e:
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> a.a.a.w.a.k.f:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getMinHeight() -> a
    void setTopHeight(float) -> a
    float getMinWidth() -> b
    void setLeftWidth(float) -> b
    float getRightWidth() -> c
    void setMinHeight(float) -> c
    float getLeftWidth() -> d
    void setRightWidth(float) -> d
    float getBottomHeight() -> e
    void setMinWidth(float) -> e
    float getTopHeight() -> f
    void setBottomHeight(float) -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> a.a.a.w.a.k.g:
    void reset() -> a
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> a
    void setFocused(boolean) -> b
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> a.a.a.w.a.k.g$a:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES -> c
com.badlogic.gdx.scenes.scene2d.utils.Layout -> a.a.a.w.a.k.h:
    float getMinHeight() -> a
    float getMinWidth() -> b
    float getMaxHeight() -> c
    void invalidateHierarchy() -> d
    float getMaxWidth() -> e
    void validate() -> f
    float getPrefHeight() -> g
    float getPrefWidth() -> h
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> a.a.a.w.a.k.i:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable tint(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> h
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> a.a.a.w.a.k.j:
    com.badlogic.gdx.math.Vector3 tmp -> b
    com.badlogic.gdx.utils.Array scissors -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    void fix(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle popScissors() -> a
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> b
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> a.a.a.w.a.k.k:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> a.a.a.w.a.k.l:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> h
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> h
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> a.a.a.w.a.k.m:
    float scale -> j
    com.badlogic.gdx.graphics.Color color -> i
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable -> a.a.a.w.a.k.n:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    void addAll(java.lang.Object[],int,int) -> a
    void clear() -> a
    boolean contains(java.lang.Object,boolean) -> a
    java.lang.Object[] ensureCapacity(int) -> a
    void removeRange(int,int) -> a
    void sort(java.util.Comparator) -> a
    java.lang.Object[] toArray(java.lang.Class) -> a
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> a
    java.lang.Object first() -> b
    java.lang.Object get(int) -> b
    int indexOf(java.lang.Object,boolean) -> b
    java.lang.Object peek() -> c
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    java.lang.Object[] resize(int) -> d
    void sort() -> e
    void truncate(int) -> e
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.a$a:
    com.badlogic.gdx.utils.Array array -> a
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    boolean allowRemove -> b
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.a$b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    int index -> c
    boolean valid -> d
com.badlogic.gdx.utils.ArrayMap -> com.badlogic.gdx.utils.b:
    java.lang.Object[] values -> b
    java.lang.Object[] keys -> a
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> f
    int size -> c
    boolean ordered -> d
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> e
    com.badlogic.gdx.utils.ArrayMap$Entries entries() -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
    void removeIndex(int) -> a
    int indexOfKey(java.lang.Object) -> b
    int put(java.lang.Object,java.lang.Object) -> b
    void resize(int) -> b
com.badlogic.gdx.utils.ArrayMap$Entries -> com.badlogic.gdx.utils.b$a:
    com.badlogic.gdx.utils.ArrayMap map -> a
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> b
    int index -> c
    boolean valid -> d
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.c:
    com.badlogic.gdx.utils.Base64Coder$CharMap regularMap -> a
    byte[] decode(java.lang.String) -> a
    byte[] decode(char[]) -> a
    byte[] decode(char[],int,int,byte[]) -> a
com.badlogic.gdx.utils.Base64Coder$CharMap -> com.badlogic.gdx.utils.c$a:
    char[] encodingMap -> a
    byte[] decodingMap -> b
com.badlogic.gdx.utils.BaseJsonReader -> com.badlogic.gdx.utils.d:
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
com.badlogic.gdx.utils.Clipboard -> com.badlogic.gdx.utils.e:
com.badlogic.gdx.utils.Collections -> com.badlogic.gdx.utils.f:
    boolean allocateIterators -> a
com.badlogic.gdx.utils.ComparableTimSort -> com.badlogic.gdx.utils.g:
    int[] runBase -> f
    int[] runLen -> g
    java.lang.Object[] tmp -> c
    int tmpCount -> d
    int stackSize -> e
    int minGallop -> b
    void binarySort(java.lang.Object[],int,int,int) -> a
    void doSort(java.lang.Object[],int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> a
    int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int) -> a
    void mergeCollapse() -> a
    void mergeHi(int,int,int,int) -> a
    void pushRun(int,int) -> a
    void rangeCheck(int,int,int) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int) -> b
    int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int) -> b
    void mergeAt(int) -> b
    void mergeForceCollapse() -> b
    void mergeLo(int,int,int,int) -> b
    int minRunLength(int) -> c
    void reverseRange(java.lang.Object[],int,int) -> c
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.h:
    com.badlogic.gdx.utils.IntArray remove -> f
    int clear -> g
    int iterating -> e
    void clear() -> a
    void removeRange(int,int) -> a
    void sort(java.util.Comparator) -> a
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    void sort() -> e
    void truncate(int) -> e
    void begin() -> f
    void remove(int) -> f
    void end() -> g
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.i:
    void dispose() -> a
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.j:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void add(float) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> a
    void addAll(float[],int,int) -> a
    void clear() -> a
    float[] ensureCapacity(int) -> a
    void removeRange(int,int) -> a
    float get(int) -> b
    float[] resize(int) -> c
    void truncate(int) -> d
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.k:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.l:
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.m:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void clear() -> a
    void insert(int,int) -> a
    int[] ensureCapacity(int) -> b
    int pop() -> b
    int get(int) -> c
    int[] toArray() -> c
    int[] resize(int) -> d
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.n:
    java.lang.Object[] valueTable -> c
    java.lang.Object zeroValue -> d
    float loadFactor -> f
    int shift -> h
    int mask -> i
    com.badlogic.gdx.utils.IntMap$Values values1 -> l
    int threshold -> g
    com.badlogic.gdx.utils.IntMap$Values values2 -> m
    int size -> a
    int[] keyTable -> b
    com.badlogic.gdx.utils.IntMap$Entries entries1 -> j
    com.badlogic.gdx.utils.IntMap$Entries entries2 -> k
    boolean hasZeroValue -> e
    com.badlogic.gdx.utils.IntMap$Entries entries() -> a
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    int place(int) -> b
    java.lang.Object put(int,java.lang.Object) -> b
    com.badlogic.gdx.utils.IntMap$Values values() -> b
    int locateKey(int) -> c
    void putResize(int,java.lang.Object) -> c
    void resize(int) -> d
com.badlogic.gdx.utils.IntMap$Entries -> com.badlogic.gdx.utils.n$a:
    com.badlogic.gdx.utils.IntMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.IntMap$Entry -> com.badlogic.gdx.utils.n$b:
    java.lang.Object value -> b
    int key -> a
com.badlogic.gdx.utils.IntMap$MapIterator -> com.badlogic.gdx.utils.n$c:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    int nextIndex -> c
    com.badlogic.gdx.utils.IntMap map -> b
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.IntMap$Values -> com.badlogic.gdx.utils.n$d:
    void reset() -> b
com.badlogic.gdx.utils.IntSet -> com.badlogic.gdx.utils.o:
    int[] keyTable -> b
    float loadFactor -> d
    int shift -> f
    int mask -> g
    int threshold -> e
    boolean hasZeroValue -> c
    int size -> a
    boolean add(int) -> a
    boolean contains(int) -> b
    int place(int) -> c
    void addResize(int) -> d
    int locateKey(int) -> e
    void resize(int) -> f
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.p:
    com.badlogic.gdx.utils.ObjectMap tagToClass -> i
    com.badlogic.gdx.utils.ObjectMap typeToFields -> h
    com.badlogic.gdx.utils.Json$Serializer defaultSerializer -> g
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> k
    com.badlogic.gdx.utils.ObjectMap classToTag -> j
    boolean enumNames -> e
    boolean sortFields -> f
    java.lang.String typeName -> a
    boolean ignoreUnknownFields -> b
    boolean ignoreDeprecated -> c
    boolean readDeprecated -> d
    void addClassTag(java.lang.String,java.lang.Class) -> a
    java.lang.String convertToString(java.lang.Enum) -> a
    void copyFields(java.lang.Object,java.lang.Object) -> a
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Class getClass(java.lang.String) -> a
    boolean ignoreUnknownField(java.lang.Class,java.lang.String) -> a
    java.lang.Object newInstance(java.lang.Class) -> a
    void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    void setUsePrototypes(boolean) -> a
    com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class) -> b
    void setTypeName(java.lang.String) -> b
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.p$a:
    com.badlogic.gdx.utils.reflect.Field field -> a
    java.lang.Class elementType -> b
    boolean deprecated -> c
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.p$b:
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.p$c:
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.p$d:
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.q:
    short[] _json_index_offsets -> j
    byte[] _json_trans_targs -> l
    com.badlogic.gdx.utils.Array elements -> a
    byte[] _json_indicies -> k
    char[] _json_trans_keys -> g
    byte[] _json_eof_actions -> n
    byte[] _json_trans_actions -> m
    short[] _json_key_offsets -> f
    byte[] _json_single_lengths -> h
    com.badlogic.gdx.utils.JsonValue current -> d
    byte[] _json_range_lengths -> i
    com.badlogic.gdx.utils.Array lastChild -> b
    com.badlogic.gdx.utils.JsonValue root -> c
    byte[] _json_actions -> e
    void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue) -> a
    void bool(java.lang.String,boolean) -> a
    void number(java.lang.String,double,java.lang.String) -> a
    void number(java.lang.String,long,java.lang.String) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.JsonValue parse(char[],int,int) -> a
    void pop() -> a
    void startArray(java.lang.String) -> a
    void string(java.lang.String,java.lang.String) -> a
    byte[] init__json_actions_0() -> b
    void startObject(java.lang.String) -> b
    byte[] init__json_eof_actions_0() -> c
    java.lang.String unescape(java.lang.String) -> c
    short[] init__json_index_offsets_0() -> d
    byte[] init__json_indicies_0() -> e
    short[] init__json_key_offsets_0() -> f
    byte[] init__json_range_lengths_0() -> g
    byte[] init__json_single_lengths_0() -> h
    byte[] init__json_trans_actions_0() -> i
    char[] init__json_trans_keys_0() -> j
    byte[] init__json_trans_targs_0() -> k
com.badlogic.gdx.utils.JsonValue -> com.badlogic.gdx.utils.r:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> a
    int size -> j
    double doubleValue -> c
    long longValue -> d
    com.badlogic.gdx.utils.JsonValue next -> h
    java.lang.String stringValue -> b
    com.badlogic.gdx.utils.JsonValue prev -> i
    java.lang.String name -> e
    com.badlogic.gdx.utils.JsonValue child -> f
    com.badlogic.gdx.utils.JsonValue parent -> g
    boolean asBoolean() -> a
    com.badlogic.gdx.utils.JsonValue get(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    void indent(int,com.badlogic.gdx.utils.StringBuilder) -> a
    boolean isFlat(com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> a
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,int) -> a
    void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> a
    void set(double,java.lang.String) -> a
    void set(long,java.lang.String) -> a
    void set(boolean) -> a
    byte asByte() -> b
    com.badlogic.gdx.utils.JsonValue getChild(java.lang.String) -> b
    boolean isNumeric(com.badlogic.gdx.utils.JsonValue) -> b
    double asDouble() -> c
    boolean has(java.lang.String) -> c
    float asFloat() -> d
    void set(java.lang.String) -> d
    int asInt() -> e
    void setName(java.lang.String) -> e
    long asLong() -> f
    short asShort() -> g
    java.lang.String asString() -> h
    boolean isArray() -> i
    boolean isBoolean() -> j
    boolean isDouble() -> k
    boolean isLong() -> l
    boolean isNull() -> m
    boolean isNumber() -> n
    boolean isObject() -> o
    boolean isString() -> p
    boolean isValue() -> q
    java.lang.String name() -> r
    java.lang.String trace() -> s
com.badlogic.gdx.utils.JsonValue$1 -> com.badlogic.gdx.utils.r$a:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> a
com.badlogic.gdx.utils.JsonValue$JsonIterator -> com.badlogic.gdx.utils.r$b:
    com.badlogic.gdx.utils.JsonValue entry -> a
    com.badlogic.gdx.utils.JsonValue current -> b
    com.badlogic.gdx.utils.JsonValue this$0 -> c
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings -> com.badlogic.gdx.utils.r$c:
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> a
    int singleLineColumns -> b
    boolean wrapNumericArrays -> c
com.badlogic.gdx.utils.JsonValue$ValueType -> com.badlogic.gdx.utils.r$d:
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> d
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> c
    com.badlogic.gdx.utils.JsonValue$ValueType array -> b
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> h
    com.badlogic.gdx.utils.JsonValue$ValueType object -> a
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> g
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> f
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> e
com.badlogic.gdx.utils.JsonWriter$1 -> com.badlogic.gdx.utils.s:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.t:
    java.util.regex.Pattern minimalValuePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> a
    java.util.regex.Pattern minimalNamePattern -> e
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> c
    java.util.regex.Pattern javascriptPattern -> d
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    java.lang.String quoteName(java.lang.String) -> a
    java.lang.String quoteValue(java.lang.Object) -> a
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.u:
    java.lang.Object[] valueTable -> c
    java.lang.Object zeroValue -> d
    float loadFactor -> f
    int shift -> h
    long[] keyTable -> b
    int mask -> i
    int threshold -> g
    int size -> a
    com.badlogic.gdx.utils.LongMap$Entries entries2 -> k
    com.badlogic.gdx.utils.LongMap$Entries entries1 -> j
    boolean hasZeroValue -> e
    com.badlogic.gdx.utils.LongMap$Values values2 -> m
    com.badlogic.gdx.utils.LongMap$Values values1 -> l
    com.badlogic.gdx.utils.LongMap$Entries entries() -> a
    java.lang.Object get(long) -> a
    java.lang.Object get(long,java.lang.Object) -> a
    void resize(int) -> a
    int place(long) -> b
    java.lang.Object put(long,java.lang.Object) -> b
    com.badlogic.gdx.utils.LongMap$Values values() -> b
    void putResize(long,java.lang.Object) -> c
    java.lang.Object remove(long) -> c
    int locateKey(long) -> d
com.badlogic.gdx.utils.LongMap$Entries -> com.badlogic.gdx.utils.u$a:
    com.badlogic.gdx.utils.LongMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.LongMap$Entry -> com.badlogic.gdx.utils.u$b:
    java.lang.Object value -> b
    long key -> a
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.u$c:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int nextIndex -> c
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.LongMap$Values -> com.badlogic.gdx.utils.u$d:
    void reset() -> b
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.v:
    int floatToIntBits(float) -> a
    float intToFloatColor(int) -> a
    int floatToIntColor(float) -> b
    int floatToRawIntBits(float) -> c
com.badlogic.gdx.utils.ObjectFloatMap -> com.badlogic.gdx.utils.w:
    java.lang.Object[] keyTable -> b
    float loadFactor -> d
    int shift -> f
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries2 -> i
    int mask -> g
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries1 -> h
    float[] valueTable -> c
    int threshold -> e
    int size -> a
    boolean containsKey(java.lang.Object) -> a
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries() -> a
    float get(java.lang.Object,float) -> a
    void resize(int) -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    int locateKey(java.lang.Object) -> b
    void put(java.lang.Object,float) -> b
    int place(java.lang.Object) -> c
    void putResize(java.lang.Object,float) -> c
com.badlogic.gdx.utils.ObjectFloatMap$Entries -> com.badlogic.gdx.utils.w$a:
    com.badlogic.gdx.utils.ObjectFloatMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.ObjectFloatMap$Entry -> com.badlogic.gdx.utils.w$b:
    float value -> b
    java.lang.Object key -> a
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator -> com.badlogic.gdx.utils.w$c:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    int nextIndex -> c
    com.badlogic.gdx.utils.ObjectFloatMap map -> b
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.x:
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> h
    float loadFactor -> d
    int shift -> f
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> i
    int mask -> g
    int threshold -> e
    int size -> a
    boolean containsKey(java.lang.Object) -> a
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries() -> a
    int get(java.lang.Object,int) -> a
    void resize(int) -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    int locateKey(java.lang.Object) -> b
    void put(java.lang.Object,int) -> b
    int place(java.lang.Object) -> c
    void putResize(java.lang.Object,int) -> c
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.x$a:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.x$b:
    java.lang.Object key -> a
    int value -> b
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.x$c:
    boolean valid -> e
    int currentIndex -> d
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    boolean hasNext -> a
    int nextIndex -> c
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.y:
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    float loadFactor -> d
    int shift -> f
    int mask -> g
    int threshold -> e
    java.lang.Object dummy -> n
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> j
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> k
    int size -> a
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> l
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> m
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> h
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> i
    void clear() -> a
    boolean containsKey(java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
    void resize(int) -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    java.lang.Object get(java.lang.Object) -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> c
    int locateKey(java.lang.Object) -> c
    void putResize(java.lang.Object,java.lang.Object) -> c
    int place(java.lang.Object) -> d
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    java.lang.Object remove(java.lang.Object) -> e
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.y$a:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> f
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.y$b:
    java.lang.Object value -> b
    java.lang.Object key -> a
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.y$c:
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.y$d:
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    int nextIndex -> c
    com.badlogic.gdx.utils.ObjectMap map -> b
    void findNextIndex() -> a
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.y$e:
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> a
    void reset() -> b
    com.badlogic.gdx.utils.Array toArray() -> c
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.z:
    java.lang.Object[] keyTable -> b
    int mask -> f
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> g
    float loadFactor -> c
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> h
    int threshold -> d
    int shift -> e
    int size -> a
    boolean add(java.lang.Object) -> a
    void ensureCapacity(int) -> a
    int tableSize(int,float) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean contains(java.lang.Object) -> b
    void resize(int) -> b
    int locateKey(java.lang.Object) -> c
    int place(java.lang.Object) -> d
    void addResize(java.lang.Object) -> e
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> com.badlogic.gdx.utils.z$a:
    com.badlogic.gdx.utils.ObjectSet set -> b
    boolean valid -> e
    int currentIndex -> d
    boolean hasNext -> a
    int nextIndex -> c
    void reset() -> a
    void findNextIndex() -> b
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.a0:
    com.badlogic.gdx.utils.Array keys -> o
    void clear() -> a
    java.lang.String toString(java.lang.String,boolean) -> a
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> b
    java.lang.Object removeIndex(int) -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> c
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    java.lang.Object remove(java.lang.Object) -> e
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> com.badlogic.gdx.utils.a0$a:
    com.badlogic.gdx.utils.Array keys -> g
    void reset() -> b
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> com.badlogic.gdx.utils.a0$b:
    com.badlogic.gdx.utils.Array keys -> f
    void reset() -> b
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues -> com.badlogic.gdx.utils.a0$c:
    com.badlogic.gdx.utils.Array keys -> f
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> a
    void reset() -> b
    com.badlogic.gdx.utils.Array toArray() -> c
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.b0:
    com.badlogic.gdx.utils.Array freeObjects -> c
    int peak -> b
    int max -> a
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void reset(java.lang.Object) -> b
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.b0$a:
    void reset() -> a
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.c0:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class,int) -> a
    java.lang.Object obtain(java.lang.Class) -> b
com.badlogic.gdx.utils.Queue -> com.badlogic.gdx.utils.d0:
    java.lang.Object[] values -> a
    int size -> d
    int head -> b
    com.badlogic.gdx.utils.Queue$QueueIterable iterable -> e
    int tail -> c
    void addLast(java.lang.Object) -> a
    java.lang.Object get(int) -> a
    java.lang.Object removeIndex(int) -> b
    void resize(int) -> c
com.badlogic.gdx.utils.Queue$QueueIterable -> com.badlogic.gdx.utils.d0$a:
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Queue queue -> a
    com.badlogic.gdx.utils.Queue$QueueIterator iterator1 -> c
    com.badlogic.gdx.utils.Queue$QueueIterator iterator2 -> d
com.badlogic.gdx.utils.Queue$QueueIterator -> com.badlogic.gdx.utils.d0$b:
    boolean allowRemove -> b
    int index -> c
    com.badlogic.gdx.utils.Queue queue -> a
    boolean valid -> d
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.e0:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> d
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.f0:
    com.badlogic.gdx.utils.Scaling stretchX -> g
    com.badlogic.gdx.utils.Scaling stretch -> f
    com.badlogic.gdx.utils.Scaling fillY -> e
    com.badlogic.gdx.utils.Scaling fillX -> d
    com.badlogic.gdx.utils.Scaling fill -> c
    com.badlogic.gdx.utils.Scaling contain -> b
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.math.Vector2 temp -> j
    com.badlogic.gdx.utils.Scaling[] $VALUES -> k
    com.badlogic.gdx.utils.Scaling none -> i
    com.badlogic.gdx.utils.Scaling stretchY -> h
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.f0$a:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.g0:
    com.badlogic.gdx.utils.StringBuilder trace -> a
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.h0:
    boolean isIos -> e
    boolean isAndroid -> f
    boolean isARM -> g
    java.lang.String nativesJar -> a
    boolean is64Bit -> h
    boolean isWindows -> b
    boolean isLinux -> c
    boolean isMac -> d
    java.util.HashSet loadedLibraries -> i
    java.lang.String crc(java.io.InputStream) -> a
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    void load(java.lang.String) -> a
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
    java.lang.String mapLibraryName(java.lang.String) -> b
    boolean isLoaded(java.lang.String) -> c
    void loadFile(java.lang.String) -> d
    java.io.InputStream readFile(java.lang.String) -> e
    void setLoaded(java.lang.String) -> f
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.i0:
    java.lang.Object[] snapshot -> e
    int snapshots -> g
    java.lang.Object[] recycled -> f
    void clear() -> a
    void removeRange(int,int) -> a
    void sort(java.util.Comparator) -> a
    java.lang.Object removeIndex(int) -> c
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object pop() -> d
    void sort() -> e
    void truncate(int) -> e
    java.lang.Object[] begin() -> f
    void end() -> g
    void modified() -> h
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.j0:
    com.badlogic.gdx.utils.TimSort timSort -> a
    com.badlogic.gdx.utils.Sort instance -> c
    com.badlogic.gdx.utils.ComparableTimSort comparableTimSort -> b
    com.badlogic.gdx.utils.Sort instance() -> a
    void sort(java.lang.Object[],int,int) -> a
    void sort(java.lang.Object[],java.util.Comparator,int,int) -> a
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.k0:
    void closeQuietly(java.io.Closeable) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream,byte[]) -> a
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> a
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.badlogic.gdx.utils.k0$a:
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.l0:
    char[] chars -> a
    char[] digits -> c
    int length -> b
    com.badlogic.gdx.utils.StringBuilder append(double) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(int,int) -> a
    com.badlogic.gdx.utils.StringBuilder append(int,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(long,int) -> a
    com.badlogic.gdx.utils.StringBuilder append(long,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> a
    com.badlogic.gdx.utils.StringBuilder append(boolean) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> a
    void append0(char) -> a
    void append0(java.lang.CharSequence,int,int) -> a
    void appendNull() -> a
    int indexOf(java.lang.String,int) -> a
    void insert0(int,java.lang.String) -> a
    com.badlogic.gdx.utils.StringBuilder replace(char,java.lang.String) -> a
    void replace0(int,int,java.lang.String) -> a
    void append0(java.lang.String) -> b
    void append0(char[]) -> b
    void append0(char[],int,int) -> b
    void clear() -> b
    int numChars(long,int) -> b
    void setLength(int) -> b
    java.lang.String substring(int,int) -> b
    void enlargeBuffer(int) -> c
    int indexOf(java.lang.String) -> c
    void move(int,int) -> c
    int numChars(int,int) -> d
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.m0:
    java.lang.Object[] tmp -> d
    int[] runBase -> g
    int[] runLen -> h
    int stackSize -> f
    int tmpCount -> e
    int minGallop -> c
    java.util.Comparator c -> b
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> a
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    void mergeCollapse() -> a
    void mergeHi(int,int,int,int) -> a
    void pushRun(int,int) -> a
    void rangeCheck(int,int,int) -> a
    void reverseRange(java.lang.Object[],int,int) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeAt(int) -> b
    void mergeForceCollapse() -> b
    void mergeLo(int,int,int,int) -> b
    int minRunLength(int) -> c
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.n0:
    long millis() -> a
    long nanoTime() -> b
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.o0:
    short[] _xml_index_offsets -> j
    byte[] _xml_trans_targs -> l
    com.badlogic.gdx.utils.Array elements -> a
    byte[] _xml_indicies -> k
    char[] _xml_trans_keys -> g
    byte[] _xml_trans_actions -> m
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    byte[] _xml_single_lengths -> h
    byte[] _xml_range_lengths -> i
    byte[] _xml_key_offsets -> f
    byte[] _xml_actions -> e
    void attribute(java.lang.String,java.lang.String) -> a
    void close() -> a
    java.lang.String entity(java.lang.String) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(char[],int,int) -> a
    byte[] init__xml_actions_0() -> b
    void open(java.lang.String) -> b
    short[] init__xml_index_offsets_0() -> c
    void text(java.lang.String) -> c
    byte[] init__xml_indicies_0() -> d
    byte[] init__xml_key_offsets_0() -> e
    byte[] init__xml_range_lengths_0() -> f
    byte[] init__xml_single_lengths_0() -> g
    byte[] init__xml_trans_actions_0() -> h
    char[] init__xml_trans_keys_0() -> i
    byte[] init__xml_trans_targs_0() -> j
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.o0$a:
    java.lang.String name -> a
    com.badlogic.gdx.utils.Array children -> c
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    java.lang.String text -> d
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.String get(java.lang.String,java.lang.String) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    com.badlogic.gdx.utils.XmlReader$Element getChild(int) -> a
    int getChildCount() -> a
    float getFloatAttribute(java.lang.String,float) -> a
    int getIntAttribute(java.lang.String,int) -> a
    java.lang.String getAttribute(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String) -> b
    java.lang.String getName() -> b
    void removeChild(com.badlogic.gdx.utils.XmlReader$Element) -> b
    com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String) -> c
    java.lang.String getText() -> c
    void setAttribute(java.lang.String,java.lang.String) -> c
    int getIntAttribute(java.lang.String) -> d
    boolean hasAttribute(java.lang.String) -> e
    void setText(java.lang.String) -> f
    java.lang.String toString(java.lang.String) -> g
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.p0.a:
    java.lang.Object newInstance(java.lang.Class,int) -> a
    void set(java.lang.Object,int,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.p0.b:
    java.lang.Class forName(java.lang.String) -> a
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> a
    com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class) -> a
    boolean isAssignableFrom(java.lang.Class,java.lang.Class) -> a
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> b
    java.lang.String getSimpleName(java.lang.Class) -> b
    boolean isMemberClass(java.lang.Class) -> c
    boolean isStaticClass(java.lang.Class) -> d
    java.lang.Object newInstance(java.lang.Class) -> e
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.p0.c:
    java.lang.reflect.Constructor constructor -> a
    java.lang.Class getDeclaringClass() -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
    void setAccessible(boolean) -> a
com.badlogic.gdx.utils.reflect.Field -> com.badlogic.gdx.utils.p0.d:
    java.lang.reflect.Field field -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Class getDeclaringClass() -> a
    java.lang.Class getElementType(int) -> a
    boolean isAnnotationPresent(java.lang.Class) -> a
    void set(java.lang.Object,java.lang.Object) -> a
    void setAccessible(boolean) -> a
    java.lang.String getName() -> b
    java.lang.Class getType() -> c
    boolean isAccessible() -> d
    boolean isStatic() -> e
    boolean isSynthetic() -> f
    boolean isTransient() -> g
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.p0.e:
com.badlogic.gdx.utils.viewport.ExtendViewport -> com.badlogic.gdx.utils.q0.a:
    float maxWorldHeight -> l
    float maxWorldWidth -> k
    float minWorldHeight -> j
    float minWorldWidth -> i
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.ScalingViewport -> com.badlogic.gdx.utils.q0.b:
    com.badlogic.gdx.utils.Scaling scaling -> i
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.Viewport -> com.badlogic.gdx.utils.q0.c:
    com.badlogic.gdx.graphics.Camera camera -> a
    int screenWidth -> f
    float worldHeight -> c
    int screenHeight -> g
    float worldWidth -> b
    int screenX -> d
    int screenY -> e
    com.badlogic.gdx.math.Vector3 tmp -> h
    void apply(boolean) -> a
    void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.graphics.Camera getCamera() -> a
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    void setScreenBounds(int,int,int,int) -> a
    void setWorldSize(float,float) -> a
    com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2) -> a
    void update(int,int,boolean) -> a
    int getScreenHeight() -> b
    int getScreenWidth() -> c
    int getScreenX() -> d
    int getScreenY() -> e
    float getWorldHeight() -> f
    float getWorldWidth() -> g
dungeons.without.dragons.ActorMapa -> dungeons.without.dragons.a:
    com.badlogic.gdx.maps.tiled.TiledMap tiledMap -> u
    com.badlogic.gdx.graphics.OrthographicCamera camara -> w
    com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer tmr -> v
    com.badlogic.gdx.physics.box2d.Box2DDebugRenderer b2dr -> x
    com.badlogic.gdx.physics.box2d.World world -> t
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
dungeons.without.dragons.ActorPersonaje -> dungeons.without.dragons.b:
    float altoPersonaje -> z
    float anchoPersonaje -> y
    com.badlogic.gdx.graphics.g2d.TextureRegion animacion -> v
    float posY -> x
    com.badlogic.gdx.graphics.g2d.Animation idle -> u
    float posX -> w
    com.badlogic.gdx.graphics.g2d.TextureRegion regionSpritesheet -> t
    com.badlogic.gdx.physics.box2d.Fixture fixture -> C
    com.badlogic.gdx.physics.box2d.World world -> A
    com.badlogic.gdx.physics.box2d.Body body -> B
    void detach() -> G
    com.badlogic.gdx.graphics.g2d.Animation crearAnimacion(int,float,int,int) -> a
    void crearAnimacionesHombre(float,int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    com.badlogic.gdx.graphics.g2d.Animation crearAnimacionReversa(int,float,int,int) -> b
    void crearAnimacionesMujer(float,int,int) -> b
dungeons.without.dragons.DungeonsWithoutDragons -> dungeons.without.dragons.c:
    dungeons.without.dragons.PantallaCreditosMusica pantallaCreditosMusica -> o
    dungeons.without.dragons.PantallaPersonaje pantallaPersonaje -> i
    dungeons.without.dragons.PantallaCreditos pantallaCreditos -> m
    boolean bloqueoNivel3 -> u
    com.badlogic.gdx.audio.Music musicaMenu -> d
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin2 -> g
    boolean musica -> q
    com.badlogic.gdx.Preferences configuracion -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion[] imagenesPersonajes -> j
    int anchoJuego -> A
    dungeons.without.dragons.PantallaNiveles pantallaNiveles -> v
    dungeons.without.dragons.PantallaNivelPrueba pantallaNivelPrueba -> y
    int backOpciones -> s
    dungeons.without.dragons.PantallaNivel3 pantallaNivel3 -> x
    dungeons.without.dragons.PantallaMenu pantallaMenu -> h
    dungeons.without.dragons.PantallaCreditosGraficos pantallaCreditosGraficos -> n
    int contadorImagenesPersonaje -> k
    boolean esHombre -> l
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> c
    com.badlogic.gdx.audio.Music musicaPartida -> e
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> f
    dungeons.without.dragons.PantallaMenuOpciones pantallaMenuOpciones -> p
    boolean sonidos -> r
    boolean bloqueoNivel2 -> t
    int altoJuego -> z
    dungeons.without.dragons.PantallaNivel2 pantallaNivel2 -> w
    void dispose() -> a
    void create() -> d
    void leerConfig() -> f
dungeons.without.dragons.PantallaCreditos -> dungeons.without.dragons.d:
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> o
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> n
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnGraficos -> q
    com.badlogic.gdx.scenes.scene2d.ui.Label lblCreditos -> p
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnMusica -> r
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaCreditos$1 -> dungeons.without.dragons.d$a:
    dungeons.without.dragons.PantallaCreditos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditos$2 -> dungeons.without.dragons.d$b:
    dungeons.without.dragons.PantallaCreditos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditos$3 -> dungeons.without.dragons.d$c:
    dungeons.without.dragons.PantallaCreditos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditos$4 -> dungeons.without.dragons.d$d:
    dungeons.without.dragons.PantallaCreditos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditosGraficos -> dungeons.without.dragons.e:
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> o
    com.badlogic.gdx.scenes.scene2d.ui.Label lblCreditosGraficos -> q
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> n
    com.badlogic.gdx.scenes.scene2d.ui.Label lblTitulo -> p
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaCreditosGraficos$1 -> dungeons.without.dragons.e$a:
    dungeons.without.dragons.PantallaCreditosGraficos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditosGraficos$2 -> dungeons.without.dragons.e$b:
    dungeons.without.dragons.PantallaCreditosGraficos this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditosMusica -> dungeons.without.dragons.f:
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> o
    com.badlogic.gdx.scenes.scene2d.ui.Label lblCreditosMusica -> q
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> n
    com.badlogic.gdx.scenes.scene2d.ui.Label lblTitulo -> p
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaCreditosMusica$1 -> dungeons.without.dragons.f$a:
    dungeons.without.dragons.PantallaCreditosMusica this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaCreditosMusica$2 -> dungeons.without.dragons.f$b:
    dungeons.without.dragons.PantallaCreditosMusica this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenu -> dungeons.without.dragons.g:
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnJugar -> o
    com.badlogic.gdx.utils.viewport.Viewport viewport -> v
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnCreditos -> q
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnPersonaje -> p
    com.badlogic.gdx.graphics.Texture[] capas -> s
    int contParallax -> w
    float[] backgroundOffsets -> t
    com.badlogic.gdx.graphics.OrthographicCamera camara -> u
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    com.badlogic.gdx.scenes.scene2d.ui.Label lblTitulo -> n
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> r
    void render(float) -> a
    void renderParallax(float,int) -> a
    void resize(int,int) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaMenu$1 -> dungeons.without.dragons.g$a:
    dungeons.without.dragons.PantallaMenu this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenu$2 -> dungeons.without.dragons.g$b:
    dungeons.without.dragons.PantallaMenu this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenu$3 -> dungeons.without.dragons.g$c:
    dungeons.without.dragons.PantallaMenu this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenu$4 -> dungeons.without.dragons.g$d:
    dungeons.without.dragons.PantallaMenu this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenuOpciones -> dungeons.without.dragons.h:
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnMusica -> o
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnSonidos -> p
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    com.badlogic.gdx.graphics.Texture imgSonidos -> s
    com.badlogic.gdx.scenes.scene2d.ui.Label lblTitulo -> n
    com.badlogic.gdx.graphics.Texture imgMusica -> r
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> q
    java.lang.String cadSonidos -> u
    java.lang.String cadMusica -> t
    com.badlogic.gdx.graphics.Texture access$002(dungeons.without.dragons.PantallaMenuOpciones,com.badlogic.gdx.graphics.Texture) -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$100(dungeons.without.dragons.PantallaMenuOpciones) -> a
    void render(float) -> a
    com.badlogic.gdx.graphics.Texture access$202(dungeons.without.dragons.PantallaMenuOpciones,com.badlogic.gdx.graphics.Texture) -> b
    com.badlogic.gdx.scenes.scene2d.ui.TextButton access$300(dungeons.without.dragons.PantallaMenuOpciones) -> b
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaMenuOpciones$1 -> dungeons.without.dragons.h$a:
    dungeons.without.dragons.PantallaMenuOpciones this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenuOpciones$2 -> dungeons.without.dragons.h$b:
    dungeons.without.dragons.PantallaMenuOpciones this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaMenuOpciones$3 -> dungeons.without.dragons.h$c:
    dungeons.without.dragons.PantallaMenuOpciones this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNivel2 -> dungeons.without.dragons.i:
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaNivel2$1 -> dungeons.without.dragons.i$a:
    dungeons.without.dragons.PantallaNivel2 this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNivel3 -> dungeons.without.dragons.j:
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaNivel3$1 -> dungeons.without.dragons.j$a:
    dungeons.without.dragons.PantallaNivel3 this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNivelPrueba -> dungeons.without.dragons.k:
    dungeons.without.dragons.ActorMapa mapa -> S
    float duracionAnimacion -> T
    com.badlogic.gdx.physics.box2d.World world -> U
    dungeons.without.dragons.ActorPersonaje personaje -> V
    void hide() -> a
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaNivelPrueba$1 -> dungeons.without.dragons.k$a:
    dungeons.without.dragons.PantallaNivelPrueba this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNiveles -> dungeons.without.dragons.l:
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> o
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnNivel1 -> q
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnNivel3 -> s
    com.badlogic.gdx.scenes.scene2d.ui.TextButton btnNivel2 -> r
    com.badlogic.gdx.scenes.scene2d.ui.Label lblTitulo -> t
    com.badlogic.gdx.graphics.Texture imgBloqueado -> n
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> p
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaNiveles$1 -> dungeons.without.dragons.l$a:
    dungeons.without.dragons.PantallaNiveles this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNiveles$2 -> dungeons.without.dragons.l$b:
    dungeons.without.dragons.PantallaNiveles this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNiveles$3 -> dungeons.without.dragons.l$c:
    dungeons.without.dragons.PantallaNiveles this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNiveles$4 -> dungeons.without.dragons.l$d:
    dungeons.without.dragons.PantallaNiveles this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaNiveles$5 -> dungeons.without.dragons.l$e:
    dungeons.without.dragons.PantallaNiveles this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaPersonaje -> dungeons.without.dragons.m:
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnAdelante -> u
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> m
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnAtras -> s
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnCambioGenero -> z
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> o
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnOpciones -> n
    dungeons.without.dragons.ActorPersonaje muestraPersonaje -> p
    float altoPersonaje -> y
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnAdelante -> t
    float anchoPersonaje -> x
    float posPersonajeY -> w
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle estiloGenero -> A
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnAtras -> r
    float posPersonajeX -> v
    com.badlogic.gdx.scenes.scene2d.ui.Label lblPersonaje -> C
    float duracionAnimacion -> q
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnCambioGenero -> B
    java.lang.String clasePersonajeInicial -> D
    dungeons.without.dragons.ActorPersonaje access$000(dungeons.without.dragons.PantallaPersonaje) -> a
    void access$100(dungeons.without.dragons.PantallaPersonaje,int) -> a
    void actualizarLabel(int) -> a
    void render(float) -> a
    void show() -> d
    void dispose() -> e
dungeons.without.dragons.PantallaPersonaje$1 -> dungeons.without.dragons.m$a:
    dungeons.without.dragons.PantallaPersonaje this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaPersonaje$2 -> dungeons.without.dragons.m$b:
    dungeons.without.dragons.PantallaPersonaje this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaPersonaje$3 -> dungeons.without.dragons.m$c:
    dungeons.without.dragons.PantallaPersonaje this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaPersonaje$4 -> dungeons.without.dragons.m$d:
    dungeons.without.dragons.PantallaPersonaje this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.PantallaPersonaje$5 -> dungeons.without.dragons.m$e:
    dungeons.without.dragons.PantallaPersonaje this$0 -> a
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> a
dungeons.without.dragons.Pantallas -> dungeons.without.dragons.n:
    float posYBack -> i
    float posXBack -> h
    float posYOpciones -> g
    com.badlogic.gdx.graphics.Texture fondo -> j
    float posXOpciones -> f
    dungeons.without.dragons.DungeonsWithoutDragons juego -> a
    float altoOpcionesYBack -> e
    float anchoOpcionesYBack -> d
    float altoBotones -> c
    float anchoBotones -> b
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnBack -> l
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnOpciones -> k
    void hide() -> a
    void resize(int,int) -> a
    void resume() -> b
    void pause() -> c
    void dispose() -> e
dungeons.without.dragons.PantallasPartida -> dungeons.without.dragons.o:
    float posYRecoger -> J
    float posXAtacar -> F
    float posYDerecha -> D
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnAtacar -> R
    com.badlogic.gdx.scenes.scene2d.Stage escenario -> K
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnDerecha -> P
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnIzquierda -> O
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnArriba -> o
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnArriba -> M
    float posXIzquierda -> y
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnAbajo -> s
    float posXAbajo -> u
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnRecoger -> H
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle estiloDerecha -> B
    float posXArriba -> q
    float anchoBotonesPartida -> m
    float posXRecoger -> I
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle estiloArriba -> p
    float posYAtacar -> G
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnDerecha -> A
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle estiloAbajo -> t
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnIzquierda -> w
    float posXDerecha -> C
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle estiloIzquierda -> x
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnRecoger -> Q
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnAbajo -> N
    float posYIzquierda -> z
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton btnBack -> L
    float posYAbajo -> v
    float posYArriba -> r
    com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable imgBtnAtacar -> E
    float altoBotonesPartida -> n
    void render(float) -> a
    void show() -> d
